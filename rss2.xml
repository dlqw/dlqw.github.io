<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>蛐蛐的软件开发世界</title>
    <link>https://rdququ.top/</link>
    
    <atom:link href="https://rdququ.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>正在学习unity中</description>
    <pubDate>Mon, 11 Mar 2024 08:11:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>UniTask 授课</title>
      <link>https://rdququ.top/posts/a3c30c4/</link>
      <guid>https://rdququ.top/posts/a3c30c4/</guid>
      <pubDate>Wed, 06 Mar 2024 15:42:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;初步认识-unitask&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#初步认识-unitask&quot;&gt;&lt;/a&gt; 初步认识 UniTask&lt;/h2&gt;
&lt;p&gt;UniTask Provides an efficient allocation f</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="初步认识-unitask"><a class="markdownIt-Anchor" href="#初步认识-unitask"></a> 初步认识 UniTask</h2><p>UniTask Provides an efficient allocation free async/await integration for Unity.</p><p>也就是说 UniTask 为 Unity 提供高效的无 GC async/await 集成。</p><h3 id="我们已经有了-c-task-为什么还要-unitask-呢"><a class="markdownIt-Anchor" href="#我们已经有了-c-task-为什么还要-unitask-呢"></a> 我们已经有了 C# Task, 为什么还要 UniTask 呢？</h3><p>JavaScript 不支持多线程，因此其支持的 WebGL 平台也是单线程的。</p><p>Unity 的主循环也是单线程的，一旦该线程死锁，一切跑在主循环上的 GO 等都会无法正常工作，而你在别的线程也无法操作主循环中的 GO。</p><p>在这些环境中，多线程的 Task 自然没法大展拳脚。</p><p>而 UniTask 不使用线程和 SynchronizationContext/ExecutionContext，完全跑在 PlayerLoop 上。</p><h3 id="安装-unitask"><a class="markdownIt-Anchor" href="#安装-unitask"></a> 安装 UniTask</h3><ol><li>Release: <a href="https://github.com/Cysharp/UniTask">Cysharp/UniTask: Provides an efficient allocation free async/await integration for Unity. (github.com)</a></li><li>UPM Package: <a href="https://github.com/Cysharp/UniTask?tab=readme-ov-file#upm-package">Cysharp/UniTask：为 Unity 提供高效的免费分配异步/等待集成。 — Cysharp/UniTask: Provides an efficient allocation free async/await integration for Unity. (github.com)</a></li></ol><h2 id="基础-level-0"><a class="markdownIt-Anchor" href="#基础-level-0"></a> 基础 Level 0</h2><h3 id="引入延时操作"><a class="markdownIt-Anchor" href="#引入延时操作"></a> 引入——延时操作</h3><p>情景：实现攻击 CD。</p><p>Update 写法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> attackCooldown = <span class="number">2f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> currentAttackCooldown = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (currentAttackCooldown &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currentAttackCooldown -= Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentAttackCooldown = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; currentAttackCooldown == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Attack();</span><br><span class="line">        currentAttackCooldown = attackCooldown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协程写法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> attackCooldown = <span class="number">2f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> canAttack = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; canAttack)</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(Attack());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    canAttack = <span class="literal">false</span>;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params">attackCooldown</span>)</span>;</span><br><span class="line">    canAttack = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UniTask 写法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> attackCooldown = <span class="number">2f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> canAttack = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; canAttack)</span><br><span class="line">    &#123;</span><br><span class="line">        Attack().Forget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> UniTaskVoid <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    canAttack = <span class="literal">false</span>;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> UniTask.Delay((<span class="built_in">int</span>)(attackCooldown * <span class="number">1000</span>));</span><br><span class="line">    canAttack = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像正常方法一样调用，方便且酷。</p><blockquote><p>UniTask 比 coroutine  好在哪？不需要绑定 monobehaviour, 可用 try - catch, 可以有返回值。</p></blockquote><h4 id="认识异步对象"><a class="markdownIt-Anchor" href="#认识异步对象"></a> 认识异步对象</h4><p>比起上面的传统方法，我们发现使用 UniTask 编写的代码里多出了几个我们不认识的标识符/语法：async/await/UniTaskVoid/.Forget()。我们一个一个来看</p><h5 id="async"><a class="markdownIt-Anchor" href="#async"></a> async</h5><blockquote><p>使用 <code>async</code> 修饰符可将方法、<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/lambda-expressions">lambda 表达式</a> 或 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/delegate-operator">匿名方法</a>指定为异步。 如果对方法或表达式使用此修饰符，则其称为异步方法 。</p></blockquote><p>也就是说，使用 async 修饰的方法，是异步方法，<strong>可能</strong>是异步执行的。</p><h5 id="await"><a class="markdownIt-Anchor" href="#await"></a> await</h5><blockquote><p>await 运算符暂停对其所属的 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/async">async</a> 方法的求值，直到其操作数表示的异步操作完成。 异步操作完成后，<code>await</code> 运算符将返回操作的结果（如果有）。当 <code>await</code> 运算符应用到表示已完成操作的操作数时，它将立即返回操作的结果，而不会暂停其所属的方法。 当 <code>await</code> 运算符暂停其所属的异步方法时，控件将返回到方法的调用方。</p></blockquote><p>什么意思呢？我们更改的之前的代码，添加了一些输出以便于你理解。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; canAttack)</span><br><span class="line">    &#123;</span><br><span class="line">        Attack().Forget();</span><br><span class="line">        Debug.Log(<span class="string">&quot;Attack Finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> UniTaskVoid <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    canAttack = <span class="literal">false</span>;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> UniTask.Delay((<span class="built_in">int</span>)(attackCooldown * <span class="number">1000</span>));</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack Cooldown Finished&quot;</span>);</span><br><span class="line">    canAttack = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">21:39:03:878</span>] Attack</span><br><span class="line">[<span class="meta">21:39:03:882</span>] Attack Finished</span><br><span class="line">[<span class="meta">21:39:05:879</span>] Attack Cooldown Finished</span><br></pre></td></tr></table></figure><p>显然代码运行到 <code>[21:39:05:879] Attack Cooldown Finisheds</code> 停了两秒，并从异步方法执行返回至异步方法调用的上下文，并输出了“Attack Finish”,在 2s 后“Attack Cooldown Finished”如期而至。</p><h5 id="方法返回了什么"><a class="markdownIt-Anchor" href="#方法返回了什么"></a> 方法返回了什么？</h5><p>一个 struct，他代表一个异步任务。</p><p><code>UniTaskVoid</code> 是 <code>UniTask</code> 的轻量版本，适用于完全无需 await 的场景，这时仍然需要 <code>.Forgot()</code> 消除警告。当我们在返回值为 <code>UniTaskVoid</code> 的方法调用前加上 await，会发生报错。</p><p><code>UniTask</code> 可以被等待，但是他不会返回任何值。</p><p><code>UniTask&lt;T&gt;</code> 可以返回值，通过 C# 元组，你可以轻松返回多个值。</p><h5 id="forget"><a class="markdownIt-Anchor" href="#forget"></a> .Forget()</h5><p><code>.Forget()</code> 方法可以让你同步执行异步方法，一般我们称其为“Fire and Forget”。虽然执行了这个异步方法，但我们并不准备等待他，而是向后执行。下面这段代码的执行效果和使用 UniTaskVoid 的原方法效果相同。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; canAttack)</span><br><span class="line">    &#123;</span><br><span class="line">        Attack().Forget();</span><br><span class="line">        Debug.Log(<span class="string">&quot;Attack Finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> UniTask <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    canAttack = <span class="literal">false</span>;</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> UniTask.Delay((<span class="built_in">int</span>)(attackCooldown * <span class="number">1000</span>));</span><br><span class="line">    Debug.Log(<span class="string">&quot;Attack Cooldown Finished&quot;</span>);</span><br><span class="line">    canAttack = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延时常用的-api"><a class="markdownIt-Anchor" href="#延时常用的-api"></a> 延时常用的 API</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int millisecondsDelay 也可换为 TimeSpan</span></span><br><span class="line"><span class="comment">//ignoreTimeScale 表示是否无视时间流速</span></span><br><span class="line"><span class="comment">//PlayerLoopTiming 表示在 PlayerLoop 的哪一个阶段处理延时操作</span></span><br><span class="line"><span class="comment">//CancellationToken 用于指定一个取消token，以便在合适的时候取消延时操作</span></span><br><span class="line"><span class="comment">//cancelImmediately 顾名思义，是用来调控取消操作是被否立即执行的布尔值。详细解释请看这个老哥的博文：https://qiita.com/Euglenach/items/6623d96d5b93ff52e816</span></span><br><span class="line"><span class="keyword">await</span> UniTask.Delay(<span class="built_in">int</span> millisecondsDelay, <span class="built_in">bool</span> ignoreTimeScale = <span class="literal">false</span>, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update, CancellationToken cancellationToken = <span class="literal">default</span>(CancellationToken), <span class="built_in">bool</span> cancelImmediately = <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> UniTask.DelayFrame(<span class="built_in">int</span> delayFrameCount, PlayerLoopTiming delayTiming = PlayerLoopTiming.Update, CancellationToken cancellationToken = <span class="literal">default</span>(CancellationToken), <span class="built_in">bool</span> cancelImmediately = <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方文档这样注释：Similar as UniTask.Yield but guaranteed run on next frame.</span></span><br><span class="line"><span class="keyword">await</span> UniTask.NextFrame(PlayerLoopTiming timing, CancellationToken cancellationToken, <span class="built_in">bool</span> cancelImmediately = <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">当然，还有</span><br><span class="line"><span class="keyword">await</span> UniTask.WaitForEndOfFrame();</span><br><span class="line"><span class="keyword">await</span> UniTask.WaitForFixedUpdate();</span><br><span class="line"><span class="keyword">await</span> UniTask.WaitForSeconds();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>UniTask.Yield()&amp;UniTask.NexFrame()&amp;yield return null 的辨析</strong></p><p><code>yield return null</code> and <code>UniTask.Yield</code> are similar but different. <code>yield return null</code> always returns next frame but <code>UniTask.Yield</code> returns next called. That is, call <code>UniTask.Yield(PlayerLoopTiming.Update)</code> on <code>PreUpdate</code>, it returns same frame. <code>UniTask.NextFrame()</code> guarantees return next frame, you can expect this to behave exactly the same as <code>yield return null</code>.</p><p>也就是说 <code>UniTask.Yield</code> 的调用依据是下一次调用(Call), 如果你再本帧的 <code>PreUpdate</code> 阶段调用了 <code>UniTask.Yield(PlayerLoopTiming.Update)</code> 那么他就是在本帧的 <code>Update</code> 阶段被调用，<code>UniTask.NextFrame()</code>则能确保一定是在下一帧被调用。</p><p>如果你对 Unity Script 生命周期和执行顺序还不够了解，请看：<a href="https://docs.unity.cn/cn/2020.3/Manual/ExecutionOrder.html">事件函数的执行顺序 - Unity 手册</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> PlayerLoopTiming</span><br><span class="line">&#123;</span><br><span class="line">    Initialization = <span class="number">0</span>,</span><br><span class="line">    LastInitialization = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    EarlyUpdate = <span class="number">2</span>,</span><br><span class="line">    LastEarlyUpdate = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    FixedUpdate = <span class="number">4</span>,</span><br><span class="line">    LastFixedUpdate = <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    PreUpdate = <span class="number">6</span>,</span><br><span class="line">    LastPreUpdate = <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line">    Update = <span class="number">8</span>,</span><br><span class="line">    LastUpdate = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">    PreLateUpdate = <span class="number">10</span>,</span><br><span class="line">    LastPreLateUpdate = <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line">    PostLateUpdate = <span class="number">12</span>,</span><br><span class="line">    LastPostLateUpdate = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_2020_2_OR_NEWER</span></span><br><span class="line">    TimeUpdate = <span class="number">14</span>,</span><br><span class="line">    LastTimeUpdate = <span class="number">15</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wait-操作"><a class="markdownIt-Anchor" href="#wait-操作"></a> Wait 操作</h3><h4 id="waituntil"><a class="markdownIt-Anchor" href="#waituntil"></a> WaitUntil</h4><p>我们的需求有时不仅仅是等待一段时间这么简单，以多人游戏中当所有人都按下确认后游戏开始为例，不使用 UniTask,你会怎么实现？下面的程序模拟了这一情景。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GameRoom</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameRoom</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Player&gt; players;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextMeshProUGUI textMeshProUGUI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        WaitForPlayers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WaitForPlayers</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (players.All(player =&gt; player.isReady))</span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text = <span class="string">&quot;All players are ready, starting game...&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Player</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> Button button;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">bool</span> isReady = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      button.onClick.AddListener(() =&gt;</span><br><span class="line">      &#123;</span><br><span class="line">         isReady = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>GameRoom</code> 里，我们不得不在 <code>Update</code> 里处理我们的逻辑，当这样的需求大量出现，<code>Update</code> 里的东西会变得越来越让人糟心。如果使用 UniTask, 这样的逻辑可以写的更简约。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameRoom</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Player&gt; players;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextMeshProUGUI textMeshProUGUI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        WaitForPlayers().Forget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> UniTaskVoid <span class="title">WaitForPlayers</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> UniTask.WaitUntil(() =&gt; players.All(player =&gt; player.isReady));</span><br><span class="line">        textMeshProUGUI.text = <span class="string">&quot;All players are ready!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们甚至完全’抛弃’了 <code>Update</code>，至少他不再需要我们关心。</p><h4 id="waitwhile"><a class="markdownIt-Anchor" href="#waitwhile"></a> WaitWhile</h4><p><code>WaitWhile(Func&lt;bool&gt; predicate)</code> 你需要传入一个 <code>Func&lt;bool&gt;</code> 委托，当其返回值为 true 时, 程序将会在此等待。</p><p>我们以玩家受伤死亡这个情景为例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> health = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Die().Forget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            health -= <span class="number">3</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Player health: &quot;</span> + health);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> UniTaskVoid <span class="title">Die</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> UniTask.WaitWhile(() =&gt; health &gt; <span class="number">0</span>);</span><br><span class="line">        Debug.Log(<span class="string">&quot;Player is dead!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">16:48:10:022</span>] Player health: <span class="number">7</span></span><br><span class="line">[<span class="meta">16:48:10:768</span>] Player health: <span class="number">4</span></span><br><span class="line">[<span class="meta">16:48:11:421</span>] Player health: <span class="number">1</span></span><br><span class="line">[<span class="meta">16:48:12:089</span>] Player health: <span class="number">-2</span></span><br><span class="line">[<span class="meta">16:48:12:094</span>] Player <span class="keyword">is</span> dead!</span><br></pre></td></tr></table></figure><h4 id="waituntilvaluechanged"><a class="markdownIt-Anchor" href="#waituntilvaluechanged"></a> WaitUntilValueChanged</h4><p><code>WaitUntilValueChanged&lt;T, U&gt;(T target, Func&lt;T, U&gt; monitorFunction) where T : class</code> 需要你传入一个类，和一个 <code>Func&lt;T,TResult&gt;</code>。当返回值 <code>U</code> 发生变化时, 程序会继续执行。凭借这个方法，我们可以实现一个简单的数据绑定。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> health = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        BindValueChange(<span class="keyword">this</span>, a =&gt; a.health, OnHealthChanged).Forget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            health -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> UniTaskVoid <span class="title">BindValueChange</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">T target, Func&lt;T, U&gt; getValue, Action action</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> UniTask.WaitUntilValueChanged(target, getValue, cancellationToken: <span class="keyword">this</span>.GetCancellationTokenOnDestroy());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.GetCancellationTokenOnDestroy().IsCancellationRequested) <span class="keyword">return</span>;</span><br><span class="line">        action();</span><br><span class="line">        BindValueChange(target, getValue, action).Forget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnHealthChanged</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Health changed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在每当 <code>Player</code> 类的成员变量 <code>health</code> 的值发生变化，传入的委托 <code>OnHealthChanged</code> 就会被调用，当该 GO 被销毁时，生成的 cancellationToken 就会阻断递归并取消当前的异步方法。</p><h3 id="条件并发"><a class="markdownIt-Anchor" href="#条件并发"></a> 条件并发</h3><h4 id="whenall"><a class="markdownIt-Anchor" href="#whenall"></a> WhenAll</h4><p><code>UniTask.WhenAll(params UniTask[] tasks)</code> 需要你传入多个 <code>UniTask</code>。你也可以传入不多于 15 个 <code>UniTask&lt;T&gt;</code>，他会返回一个元组。当所有传入 <code>UniTask</code> 都完成后，程序正常执行。</p><p>设想你在负责网络资源拉取，比如当用户点击按钮去拉取网络图片，你需要在所有图片拉取结束后告知用户加载完成，并且这些图片拉取的速度是不一样的，为了不让画面感到违和，你需要让这些图片同时显示。你会怎么完成这个需求呢？写一大堆 bool 在 <code>Update</code> 里循环判断？让我们来看看用 UniTask 如何优雅实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button button;</span><br><span class="line">    <span class="keyword">public</span> Image image;</span><br><span class="line">    <span class="keyword">public</span> Image image2;</span><br><span class="line">    <span class="keyword">public</span> TextMeshProUGUI textMeshProUGUI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        button.onClick.AddListener(() =&gt; &#123; GetImages().Forget(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> UniTaskVoid <span class="title">GetImages</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> url1 = <span class="string">&quot;https://img.moegirl.org.cn/common/thumb/9/93/Yamada_ryo_goods.jpg/375px-Yamada_ryo_goods.jpg&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> url2 = <span class="string">&quot;https://games-cn.org/wp-content/uploads/2024/02/-01-1-scaled-520x245-c.jpg&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> UniTask.WhenAll(</span><br><span class="line">            GetImage(url1),</span><br><span class="line">            GetImage(url2));</span><br><span class="line">        <span class="keyword">if</span> (result.Item1.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image.sprite = Sprite.Create(result.Item1.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.Item1.Item2.width, result.Item1.Item2.height), <span class="keyword">new</span> Vector2(<span class="number">0.5f</span>, <span class="number">0.5f</span>));</span><br><span class="line">            textMeshProUGUI.text += url1 + <span class="string">&quot; loaded success!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text += url1 + <span class="string">&quot; loaded failed!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.Item2.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image2.sprite = Sprite.Create(result.Item2.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.Item2.Item2.width, result.Item2.Item2.height), <span class="keyword">new</span> Vector2(<span class="number">0.5f</span>, <span class="number">0.5f</span>));</span><br><span class="line">            textMeshProUGUI.text += url2 + <span class="string">&quot; loaded success!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text += url2 + <span class="string">&quot; loaded failed!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> UniTask&lt;(<span class="built_in">bool</span>, Texture2D)&gt; GetImage(<span class="built_in">string</span> url)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> www = UnityWebRequestTexture.GetTexture(url);</span><br><span class="line">        <span class="keyword">await</span> www.SendWebRequest();</span><br><span class="line">        <span class="keyword">return</span> (www.result == UnityWebRequest.Result.Success, ((DownloadHandlerTexture)www.downloadHandler).texture);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="whenany"><a class="markdownIt-Anchor" href="#whenany"></a> WhenAny</h4><p><code>WhenAny</code> 和 <code>WhenAll</code> 类似，只不过从所有任务都完成变成了只要有一个完成就回到调用方法的上下文。其返回值的第一个是率先完成的任务的 Id。我们稍微修改下之前的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button button;</span><br><span class="line">    <span class="keyword">public</span> Image image;</span><br><span class="line">    <span class="keyword">public</span> Image image2;</span><br><span class="line">    <span class="keyword">public</span> TextMeshProUGUI textMeshProUGUI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        button.onClick.AddListener(() =&gt; &#123; GetImages().Forget(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> UniTaskVoid <span class="title">GetImages</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> url1 = <span class="string">&quot;https://img.moegirl.org.cn/common/thumb/9/93/Yamada_ryo_goods.jpg/375px-Yamada_ryo_goods.jpg&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> url2 = <span class="string">&quot;https://games-cn.org/wp-content/uploads/2024/02/-01-1-scaled-520x245-c.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">// string url2 = &quot;https://img.moegirl.org.cn/common/thumb/9/93/Yamada_ryo_goods.jpg/375px-Yamada_ryo_goods.jpg&quot;;</span></span><br><span class="line">        <span class="keyword">var</span> task1 = GetImage(url1);</span><br><span class="line">        <span class="keyword">var</span> task2 = GetImage(url2);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> UniTask.WhenAny(task1, task2);</span><br><span class="line">        Debug.Log(result.winArgumentIndex <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0</span> =&gt; url1,</span><br><span class="line">            <span class="number">1</span> =&gt; url2,</span><br><span class="line">            _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException()</span><br><span class="line">        &#125; + <span class="string">&quot; finished first&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (result.result1.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image.sprite = Sprite.Create(result.result1.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.result1.Item2.width, result.result1.Item2.height), <span class="keyword">new</span> Vector2(<span class="number">0.5f</span>, <span class="number">0.5f</span>));</span><br><span class="line">            image.rectTransform.sizeDelta =</span><br><span class="line">                <span class="keyword">new</span> Vector2(result.result1.Item2.width, result.result1.Item2.height);</span><br><span class="line">            Debug.Log(<span class="string">&quot;image1 loaded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text = <span class="string">&quot;\nFailed to load image from &quot;</span> + url1;</span><br><span class="line">            Debug.Log(<span class="string">&quot;image1 failed to load&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.result2.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image2.sprite = Sprite.Create(result.result2.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.result2.Item2.width, result.result2.Item2.height), <span class="keyword">new</span> Vector2(<span class="number">0.5f</span>, <span class="number">0.5f</span>));</span><br><span class="line">            image2.rectTransform.sizeDelta =</span><br><span class="line">                <span class="keyword">new</span> Vector2(result.result2.Item2.width, result.result2.Item2.height);</span><br><span class="line">            Debug.Log(<span class="string">&quot;image2 loaded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text += <span class="string">&quot;\nFailed to load image from &quot;</span> + url2;</span><br><span class="line">            Debug.Log(<span class="string">&quot;image2 failed to load&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> UniTask&lt;(<span class="built_in">bool</span>, Texture2D)&gt; GetImage(<span class="built_in">string</span> url)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> www = UnityWebRequestTexture.GetTexture(url);</span><br><span class="line">        <span class="keyword">await</span> www.SendWebRequest();</span><br><span class="line">        <span class="keyword">if</span> (www.result != UnityWebRequest.Result.Success) Debug.Log(<span class="string">&quot;error: &quot;</span> + www.error);</span><br><span class="line">        <span class="keyword">else</span> Debug.Log(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (www.result == UnityWebRequest.Result.Success,</span><br><span class="line">            ((DownloadHandlerTexture)www.downloadHandler).texture);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，只有一张图片加载了出来，这是为什么呢？<strong>这是一个随堂问题。</strong></p><p>通过观察日志我们可以发现，未能成功加载出来的图片其实也成功获取了图片，但是在任务组返回的时候，他还没有成功获取，所以传回去的是初始值。</p><p><code>WhenAny</code> 的返回值中，被正常赋值的只有率先完成的异步任务的返回值，这是值得我们谨记在心的。</p><h3 id="取消和异常处理"><a class="markdownIt-Anchor" href="#取消和异常处理"></a> 取消和异常处理</h3><h4 id="超时处理"><a class="markdownIt-Anchor" href="#超时处理"></a> 超时处理</h4><p>超时处理一直是网络请求中的重难点，同时，在游戏逻辑中，这个任务更加常见，对于他的处理方法需要我们牢牢掌握。我们回到之前获取网络图片的案例，看看这里存在的超时任务需求和解决方案。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button button;</span><br><span class="line">    <span class="keyword">public</span> Image image;</span><br><span class="line">    <span class="keyword">public</span> Image image2;</span><br><span class="line">    <span class="keyword">public</span> TextMeshProUGUI textMeshProUGUI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        button.onClick.AddListener(() =&gt; &#123; GetImages().Forget(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> UniTaskVoid <span class="title">GetImages</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> url1 = <span class="string">&quot;https://img.moegirl.org.cn/common/thumb/9/93/Yamada_ryo_goods.jpg/375px-Yamada_ryo_goods.jpg&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> url2 = <span class="string">&quot;https://i.pximg.net/c/240x480/img-master/img/2024/03/09/00/00/53/116740385_p0_master1200.jpg&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> task1 = GetImage(url1, <span class="number">10f</span>);</span><br><span class="line">        <span class="keyword">var</span> task2 = GetImage(url2, <span class="number">10f</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> UniTask.WhenAll(task1, task2);</span><br><span class="line">        <span class="keyword">if</span> (result.Item1.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image.sprite = Sprite.Create(result.Item1.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.Item1.Item2.width, result.Item1.Item2.height), Vector2.zero);</span><br><span class="line">            image.rectTransform.sizeDelta = <span class="keyword">new</span> Vector2(result.Item1.Item2.width, result.Item1.Item2.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text = <span class="string">&quot;Image 1 failed to load.\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.Item2.Item1)</span><br><span class="line">        &#123;</span><br><span class="line">            image2.sprite = Sprite.Create(result.Item2.Item2,</span><br><span class="line">                <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, result.Item2.Item2.width, result.Item2.Item2.height), Vector2.zero);</span><br><span class="line">            image2.rectTransform.sizeDelta = <span class="keyword">new</span> Vector2(result.Item2.Item2.width, result.Item2.Item2.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            textMeshProUGUI.text += <span class="string">&quot;Image 2 failed to load.\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> UniTask&lt;(<span class="built_in">bool</span>, Texture2D)&gt; GetImage(<span class="built_in">string</span> url, <span class="built_in">float</span> timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cts = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">        cts.CancelAfterSlim(TimeSpan.FromSeconds(timeout));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> www = UnityWebRequestTexture.GetTexture(url);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> www.SendWebRequest().WithCancellation(cts.Token).SuppressCancellationThrow();</span><br><span class="line">        <span class="keyword">if</span> (!result.IsCanceled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">true</span>, ((DownloadHandlerTexture)www.downloadHandler).texture);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 10s 后，我们发现，来自 pixiv 的图片在规定时间内未能成功加载。按道理来说，如果你不做超时操作，这个任务会永远卡死在这里，因为我们可能永远无法拉取到这张图片，但其实 UniTask 内部对该操作同样有超时判断，当你不做超时判断时，在默认时间到达后，程序会抛出一个 timeout error。</p><h4 id="取消"><a class="markdownIt-Anchor" href="#取消"></a> 取消</h4><p>不仅仅是超时——比如说你在制作一款 RTS 游戏，你希望能给玩家提供一个取消建造单位操作的功能，无论是手动取消还是因为资源不够自动取消。我们来试一试。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CancelExampleRTS</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> CancellationTokenSource cancellationTokenSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">OnClickTrainTroop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cancellationTokenSource = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">        <span class="keyword">var</span> isCanceled = <span class="keyword">await</span> TrainTroopAsync(cancellationTokenSource.Token).SuppressCancellationThrow();</span><br><span class="line">        <span class="keyword">if</span> (isCanceled)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Training canceled.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> UniTask <span class="title">TrainTroopAsync</span>(<span class="params">CancellationToken token</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> progress = <span class="number">0</span>;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;Training progress: <span class="subst">&#123;progress&#125;</span>%&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (progress &lt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            progress += Time.deltaTime * <span class="number">15</span>;</span><br><span class="line">            <span class="keyword">await</span> UniTask.NextFrame(token);</span><br><span class="line">            Debug.Log(<span class="string">$&quot;Training progress: <span class="subst">&#123;progress&#125;</span>%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;Training completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            OnClickTrainTroop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            cancellationTokenSource.Cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连锁取消"><a class="markdownIt-Anchor" href="#连锁取消"></a> 连锁取消</h4><p><code>CancellationTokenSource.CreateLinkedTokenSource(params System.Threading.CancellationToken[] tokens)</code> 该方法可以链接多个 <code>CancellationToken</code>，只要有一个被取消，其他 <code>CancellationToken</code> 都会被取消。</p><h2 id="基础-level-1"><a class="markdownIt-Anchor" href="#基础-level-1"></a> 基础 Level 1</h2><h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3><h3 id="委托和-lambda"><a class="markdownIt-Anchor" href="#委托和-lambda"></a> 委托和 Lambda</h3><h3 id="unitaskcompletionsource"><a class="markdownIt-Anchor" href="#unitaskcompletionsource"></a> UniTaskCompletionSource</h3><h3 id="thread-pool"><a class="markdownIt-Anchor" href="#thread-pool"></a> Thread Pool</h3><h3 id="progress"><a class="markdownIt-Anchor" href="#progress"></a> Progress</h3><h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3><h2 id="应用专题"><a class="markdownIt-Anchor" href="#应用专题"></a> 应用专题</h2><h3 id="资源加载"><a class="markdownIt-Anchor" href="#资源加载"></a> 资源加载</h3><h3 id="unitasktracker"><a class="markdownIt-Anchor" href="#unitasktracker"></a> UniTaskTracker</h3><h3 id="unitasktextmeshpro"><a class="markdownIt-Anchor" href="#unitasktextmeshpro"></a> UniTask.TextMeshPro</h3><h3 id="unitaskdotween"><a class="markdownIt-Anchor" href="#unitaskdotween"></a> UniTask.DOTween</h3><h2 id="进阶篇"><a class="markdownIt-Anchor" href="#进阶篇"></a> 进阶篇</h2><h3 id="asyncenumerable-和-async-linq"><a class="markdownIt-Anchor" href="#asyncenumerable-和-async-linq"></a> AsyncEnumerable 和 Async LINQ</h3><h3 id="创建统一的事件异步流"><a class="markdownIt-Anchor" href="#创建统一的事件异步流"></a> 创建统一的事件异步流</h3><h3 id="响应式组件"><a class="markdownIt-Anchor" href="#响应式组件"></a> 响应式组件</h3><h3 id="channel"><a class="markdownIt-Anchor" href="#channel"></a> Channel</h3><h2 id="原理篇"><a class="markdownIt-Anchor" href="#原理篇"></a> 原理篇</h2><h2 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h2><p><a href="https://cysharp.github.io/UniTask/">首页 |UniTask 的 — Home | UniTask (cysharp.github.io)</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/a3c30c4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>rust_learning_note</title>
      <link>https://rdququ.top/posts/b6352538/</link>
      <guid>https://rdququ.top/posts/b6352538/</guid>
      <pubDate>Tue, 06 Feb 2024 16:14:17 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;从-hello-world-开始&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#从-hello-world-开始&quot;&gt;&lt;/a&gt; 从 hello world 开始&lt;/h2&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="从-hello-world-开始"><a class="markdownIt-Anchor" href="#从-hello-world-开始"></a> 从 hello world 开始</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>rust 的缩进是 4 个空格，不是 tab</li></ul><h3 id="编译你的第一个-rust-程序"><a class="markdownIt-Anchor" href="#编译你的第一个-rust-程序"></a> 编译你的第一个 rust 程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc main.rs</span><br></pre></td></tr></table></figure><p>编译成功后会生成一个二进制文件，在 windows 上还会生成一个 .pdb 文件以存贮调试信息。</p><p>Rust 是 ahead-of-time (预编译)的，所以编译后的二进制文件可以在没有 rust 环境的机器上运行。</p><p>rustc 命令可以用来编译一些简单的 rust 程序，但是对于大型项目，我们需要使用 cargo 来构建和管理项目。</p><h2 id="hello-cargo"><a class="markdownIt-Anchor" href="#hello-cargo"></a> Hello, Cargo!</h2><p>Cargo 是 rust 的构建系统和包管理器。</p><p>用 cargo 创建一个新的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_cargo</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a class="markdownIt-Anchor" href="#项目结构"></a> 项目结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello_cargo</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── src</span><br><span class="line">    └── main.rs</span><br></pre></td></tr></table></figure><h3 id="cargotoml"><a class="markdownIt-Anchor" href="#cargotoml"></a> Cargo.toml</h3><p>Cargo.toml 是一个配置文件，用来描述项目的元数据。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;hello_cargo&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br></pre></td></tr></table></figure><p>[package] 部分描述了包的元数据 - name: 包的名字 - version: 包的版本 - authors: 包的作者 - edition: rust 的版本</p><p>[dependencies] 部分描述了项目的依赖。</p><p>在 Rust 里，代码的包称作 crate.</p><h3 id="cargo-的编译和运行"><a class="markdownIt-Anchor" href="#cargo-的编译和运行"></a> cargo 的编译和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello_cargo</span><br><span class="line">cargo build</span><br></pre></td></tr></table></figure><p>编译成功后会生成一个 target 目录，里面包含了编译后的二进制文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>cargo run 会自动编译并运行程序。如果原代码没有修改且已经编译过，cargo run 只会运行二进制文件。</p><h3 id="cargo-的检查"><a class="markdownIt-Anchor" href="#cargo-的检查"></a> cargo 的检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo check</span><br></pre></td></tr></table></figure><p>cargo check 只会检查代码是否能编译通过，但不会生成二进制文件。</p><h3 id="cargo-的发布"><a class="markdownIt-Anchor" href="#cargo-的发布"></a> cargo 的发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><p>–release 参数会生成一个优化后的二进制文件，但编译时间会更长。</p><h2 id="let-mut-和-use"><a class="markdownIt-Anchor" href="#let-mut-和-use"></a> let mut 和 use</h2><p>prelude(预导入)模块会被自动引入到每个 rust 程序的作用域中。但如果你想使用的模块不在 prelude 中，你需要使用 use 关键字来引入。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br></pre></td></tr></table></figure><p>let 关键字可用于申明一个变量，变量默认是不可变的(imutable)。如果你想申明一个可变的变量，你需要额外使用 mut 关键字。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">foo</span> = <span class="number">1</span>;</span><br><span class="line">foo = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/b6352538/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>lightprobe初步认识</title>
      <link>https://rdququ.top/posts/d5175d0d/</link>
      <guid>https://rdququ.top/posts/d5175d0d/</guid>
      <pubDate>Wed, 31 Jan 2024 06:52:25 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;Unity 的预计算实时 GI 或者烘焙 GI 只对静态的物体起作用，对于可移动的物体，需要用一种新的技术来解决光照问题。&lt;/p&gt;
&lt;p&gt;为了让动态物体（如动态场景元素或角色）能够获得静态物体反弹的光线，需要将这些光照信息记录下来，并且在运行时能快速读取和使用。&lt;/p&gt;
&lt;p&gt;通过在场景中放置采样点捕捉各个方向的光线来实现动态物体接收间接光的功能。这些采样点记录的光照信息被编码成可以在游戏过程中快速计算值。在 Unity 中，我们将这些采样点称为“光照探针”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;让动态物体从场景接受间接光&lt;/li&gt;
&lt;li&gt;使用该技术的动态物体不会产生反射光 =&amp;gt; 使用于较小的物体&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Unity 的预计算实时 GI 或者烘焙 GI 只对静态的物体起作用，对于可移动的物体，需要用一种新的技术来解决光照问题。</p><p>为了让动态物体（如动态场景元素或角色）能够获得静态物体反弹的光线，需要将这些光照信息记录下来，并且在运行时能快速读取和使用。</p><p>通过在场景中放置采样点捕捉各个方向的光线来实现动态物体接收间接光的功能。这些采样点记录的光照信息被编码成可以在游戏过程中快速计算值。在 Unity 中，我们将这些采样点称为“光照探针”</p></blockquote><ul><li>让动态物体从场景接受间接光</li><li>使用该技术的动态物体不会产生反射光 =&gt; 使用于较小的物体</li></ul><span id="more"></span><h2 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h2><p>通过 3D 空间中的 Probe 对入射光进行采样并将这些信息通过<strong>球谐函数</strong>编码处理后保存成文件。</p><h3 id="球谐函数"><a class="markdownIt-Anchor" href="#球谐函数"></a> 球谐函数</h3><p><a href="https://zhuanlan.zhihu.com/p/351289217">简单介绍球谐函数（Spherical Harmonics）</a></p><p>一系列定义在球面上的基函数，单位球面上的一个点实际上就能代表一个方向。</p><p>三维空间中的方向可以使用二位表示 =&gt; $ \theta $ 和 $ \phi $ 方位角和俯仰角<br />eg.经纬度</p><p>SH 系数 =&gt; 只记录基函数系数</p><p>如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mn>0.5</mn><mo>+</mo><mn>0.1</mn><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mn>0.07</mn><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mn>0.05</mn><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mn>0.3</mn><mo stretchy="false">(</mo><mn>2</mn><msup><mo><mi>cos</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>θ</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r =  0.5 + 0.1\cos \theta + 0.07\sin \theta + 0.05\cos \theta\sin \theta + 0.3(2\cos^2 \theta - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">cos</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>可以只记参数，压缩为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn><mo separator="true">,</mo><mn>0.1</mn><mo separator="true">,</mo><mn>0.07</mn><mo separator="true">,</mo><mn>0.3</mn></mrow><annotation encoding="application/x-tex">0.5,0.1,0.07,0.3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span></span></span></span></p><h3 id="球谐函数参考资料"><a class="markdownIt-Anchor" href="#球谐函数参考资料"></a> 球谐函数参考资料</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/50208005">球谐光照与 PRT 学习笔记（三）：球谐函数 - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/649881002">球谐函数学习笔记 - 知乎 (zhihu.com)</a></li><li><a href="https://mathworld.wolfram.com/SphericalHarmonic.html">Spherical Harmonic – from Wolfram MathWorld</a></li><li><a href="https://zhuanlan.zhihu.com/p/572840876">大二学生都会的球谐函数 - 知乎 (zhihu.com)</a></li></ol><h2 id="unity-中的-lightprobes"><a class="markdownIt-Anchor" href="#unity-中的-lightprobes"></a> Unity 中的 LightProbes</h2><p>存储数据： 1. Probe Position 2. SH 系数 3. 四面体曲面细分</p><h3 id="曲面细分"><a class="markdownIt-Anchor" href="#曲面细分"></a> 曲面细分</h3><p><a href="https://zhuanlan.zhihu.com/p/144400261">计算机图形学十一：曲面细分(subdivision)与曲面简化(Smplication) </a></p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/d5175d0d/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unity_Tilemap关于SetColor等坑的记录</title>
      <link>https://rdququ.top/posts/b5da1af9/</link>
      <guid>https://rdququ.top/posts/b5da1af9/</guid>
      <pubDate>Fri, 26 Jan 2024 11:18:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;涉事代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#涉事代码&quot;&gt;&lt;/a&gt; 涉事代码&lt;/h2&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Update&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Input.GetMouseButtonDown(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pos = Camera.main.ScreenToWorldPoint(Input.mousePosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.Log(pos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; posInt = tileMap.WorldToCell(pos) + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector3Int(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.Log(posInt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tileMap.SetColor(posInt,Color.red);&lt;span class=&quot;comment&quot;&gt;// BUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.Log(tileMap.HasTile(posInt)+&lt;span class=&quot;string&quot;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;+tileMap.GetSprite(posInt)+&lt;span class=&quot;string&quot;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;+tileMap.GetColor(posInt));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="涉事代码"><a class="markdownIt-Anchor" href="#涉事代码"></a> 涉事代码</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = Camera.main.ScreenToWorldPoint(Input.mousePosition);</span><br><span class="line">        Debug.Log(pos);</span><br><span class="line">        <span class="keyword">var</span> posInt = tileMap.WorldToCell(pos) + <span class="keyword">new</span> Vector3Int(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        Debug.Log(posInt);</span><br><span class="line">        tileMap.SetColor(posInt,Color.red);<span class="comment">// BUG</span></span><br><span class="line">        Debug.Log(tileMap.HasTile(posInt)+<span class="string">&quot;  &quot;</span>+tileMap.GetSprite(posInt)+<span class="string">&quot;  &quot;</span>+tileMap.GetColor(posInt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="事故描述"><a class="markdownIt-Anchor" href="#事故描述"></a> 事故描述</h2><p><code>tileMap.SetColor(posInt,Color.red);// BUG</code> 不工作</p><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><ol><li>刷新瓦片 <code>tileMap.RefreshTile(posInt);</code> ERROR</li><li>解锁瓦片 <code>tileMap.RemoveTileFlags(posInt,TileFlags.LockColor);</code> WORK</li></ol><h2 id="解决流程"><a class="markdownIt-Anchor" href="#解决流程"></a> 解决流程</h2><p>先尝试在 <code>SetColor</code> 后 <code>RefreshTile</code> 无果</p><p>接着在 <code>SetColor</code> 前 <code>RemoveTileFlags</code> 无果</p><p>尝试移除 <code>RefreshTile</code> 成功</p><h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2><p>Tile 来自 Asset 而非代码动态创建，导致 Tile 处于被锁状态</p><p><code>RefreshTile</code> 会将 Tile 颜色恢复为 Asset 中配置的颜色</p><h2 id="最终代码"><a class="markdownIt-Anchor" href="#最终代码"></a> 最终代码</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = Camera.main.ScreenToWorldPoint(Input.mousePosition);</span><br><span class="line">        Debug.Log(pos);</span><br><span class="line">        <span class="keyword">var</span> posInt = tileMap.WorldToCell(pos)+ <span class="keyword">new</span> Vector3Int(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        Debug.Log(posInt);</span><br><span class="line">        tileMap.RemoveTileFlags(posInt,TileFlags.LockColor);<span class="comment">// WORK</span></span><br><span class="line">        tileMap.SetColor(posInt,Color.red);</span><br><span class="line">        <span class="comment">// tileMap.RefreshTile(posInt); // ERROR</span></span><br><span class="line">        Debug.Log(tileMap.HasTile(posInt)+<span class="string">&quot;  &quot;</span>+tileMap.GetSprite(posInt)+<span class="string">&quot;  &quot;</span>+tileMap.GetColor(posInt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://www.bilibili.com/read/cv24449731/">Unity 中基于 Tilemap 的战争迷雾实现踩坑指南 - 哔哩哔哩 (bilibili.com)</a></p><p><a href="https://forum.unity.com/threads/tilemap-setcolor-issue-does-nothing.1421429/">Bug - Tilemap.SetColor 问题（不执行任何操作） - Unity 论坛 — Bug - Tilemap.SetColor issue (does nothing) - Unity Forum</a></p><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Tilemaps.Tilemap.html">Tilemaps.Tilemap - Unity 脚本 API</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/b5da1af9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>对象创建型_工厂方法_抽象工厂_生成器_单例</title>
      <link>https://rdququ.top/posts/68359e54/</link>
      <guid>https://rdququ.top/posts/68359e54/</guid>
      <pubDate>Tue, 23 Jan 2024 07:44:34 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;strong&gt;抽象&lt;/strong&gt;了&lt;strong&gt;实例化&lt;/strong&gt;过程。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>抽象</strong>了<strong>实例化</strong>过程。</p><span id="more"></span><ul><li>接口，抽象类</li><li>new()</li></ul><h2 id="工厂方法-factory-method"><a class="markdownIt-Anchor" href="#工厂方法-factory-method"></a> 工厂方法 Factory Method</h2><h3 id="工厂方法的意图"><a class="markdownIt-Anchor" href="#工厂方法的意图"></a> 工厂方法的意图</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3><p>如果不用工厂方法，我们如何实现？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wand</span><span class="comment">//产品</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FireWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Fire Wand&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IceWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IceWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Ice Wand&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()<span class="comment">//实例化，客户端，调用者</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> fireWand = <span class="keyword">new</span> FireWand();</span><br><span class="line">    <span class="keyword">var</span> iceWand = <span class="keyword">new</span> IceWand();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要一个新的魔杖，我们需要实现一个新的魔杖类，然后实现一个新的方法，这样就会导致类的爆炸。</p><p>如果某一个魔杖需要求修改，那么需要全局搜索，修改所有的地方。</p><p>如果我们使用工厂方法，我们可以这样实现：</p><h4 id="swtich-case-简单工厂"><a class="markdownIt-Anchor" href="#swtich-case-简单工厂"></a> swtich case (简单工厂)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> WandType</span><br><span class="line">&#123;</span><br><span class="line">    Fire,</span><br><span class="line">    Ice</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WandFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wand <span class="title">CreateWand</span>(<span class="params">WandType type</span>)<span class="comment">//if else</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> WandType.Fire:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Wand &#123; Name = <span class="string">&quot;Fire Wand&quot;</span> &#125;;</span><br><span class="line">            <span class="keyword">case</span> WandType.Ice:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Wand &#123; Name = <span class="string">&quot;Ice Wand&quot;</span> &#125;;</span><br><span class="line">            <span class="literal">default</span>:<span class="comment">//缺省：默认</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(type), type, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> WandFactory();</span><br><span class="line">    <span class="keyword">var</span> fireWand = factory.CreateWand(WandType.Fire);</span><br><span class="line">    <span class="keyword">var</span> iceWand = factory.CreateWand(WandType.Ice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>降低了客户端（调用者）和具体产品类的耦合度。然而违背了开闭原则，如果我们需要增加一个新的魔杖，我们需要修改工厂类。</p><h4 id="泛型类"><a class="markdownIt-Anchor" href="#泛型类"></a> 泛型类</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> WandType</span><br><span class="line">&#123;</span><br><span class="line">    Fire,</span><br><span class="line">    Ice</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;Wand&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FireWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Fire Wand&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IceWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IceWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Ice Wand&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WandFactory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Wand</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">CreateWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> iceWandFactory = <span class="keyword">new</span> WandFactory&lt;IceWand&gt;();</span><br><span class="line">        <span class="keyword">var</span> wand = iceWandFactory.CreateWand();</span><br><span class="line">        <span class="keyword">var</span> fireWandFactory = <span class="keyword">new</span> WandFactory&lt;FireWand&gt;();</span><br><span class="line">        <span class="keyword">var</span> wand2 = fireWandFactory.CreateWand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 where : Wand, new() 来限制泛型类型。</p><p>tips: new() 限制泛型类型必须有无参构造函数。</p><h4 id="泛型方法"><a class="markdownIt-Anchor" href="#泛型方法"></a> 泛型方法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IWandFactoryMethod</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Wand <span class="title">CreateWand</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : Wand, <span class="keyword">new</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WandFactory</span> : <span class="title">IWandFactoryMethod</span><span class="comment">//落实</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Wand <span class="title">CreateWand</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : Wand, <span class="keyword">new</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> wandFactory = <span class="keyword">new</span> WandFactory();</span><br><span class="line">        <span class="keyword">var</span> wand = wandFactory.CreateWand&lt;IceWand&gt;();</span><br><span class="line">        <span class="keyword">var</span> wand2 = wandFactory.CreateWand&lt;FireWand&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三点好处： 1. 拥有工厂接口 2. 可以限制传入产品，并且在编译期间就可以发现 3. 免去 switch case 的判断</p><h2 id="抽象工厂-abstract-factory"><a class="markdownIt-Anchor" href="#抽象工厂-abstract-factory"></a> 抽象工厂 Abstract Factory</h2><h3 id="抽象工厂的意图"><a class="markdownIt-Anchor" href="#抽象工厂的意图"></a> 抽象工厂的意图</h3><p>提供一个接口，用于创建相关或依赖对象的<strong>家族</strong>，而不需要明确指定具体类。</p><h3 id="具体实现-2"><a class="markdownIt-Anchor" href="#具体实现-2"></a> 具体实现</h3><p>抽象工厂<br />具体工厂<br />抽象产品<br />具体产品</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> magicType</span><br><span class="line">&#123;</span><br><span class="line">    Fire,</span><br><span class="line">    Ice</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;Wand&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Sword</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;Sword&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireSword</span> : <span class="title">Sword</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FireSword</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Fire Sword&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IceSword</span> : <span class="title">Sword</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IceSword</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Ice Sword&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FireWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Fire Wand&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IceWand</span> : <span class="title">Wand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IceWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;Ice Wand&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;生产了&quot;</span>+Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Wand <span class="title">CreateWand</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Sword <span class="title">CreateSword</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FireFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Wand <span class="title">CreateWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FireWand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Sword <span class="title">CreateSword</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FireSword();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IceFactory</span> : <span class="title">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Wand <span class="title">CreateWand</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IceWand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Sword <span class="title">CreateSword</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IceSword();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AbstractFactory factory = <span class="keyword">new</span> FireFactory();</span><br><span class="line">        factory.CreateSword();</span><br><span class="line">        factory.CreateWand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><p>如果我们需要增加一个新的产品，比如 Shield，那么我们需要修改 AbstractFactory，这样就违背了开闭原则。</p><h3 id="工厂方法的非单例实现"><a class="markdownIt-Anchor" href="#工厂方法的非单例实现"></a> 工厂方法的非单例实现</h3><p>静态类和静态方法</p><p>参考是在<strong>设计模式与完美游戏开发的 201-202 页</strong></p><h2 id="生成器-builder"><a class="markdownIt-Anchor" href="#生成器-builder"></a> 生成器 Builder</h2><h3 id="生成器的意图"><a class="markdownIt-Anchor" href="#生成器的意图"></a> 生成器的意图</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><blockquote><p>当一个类的构造函数参数个数超过 4 个，而且这些参数有些是可选的参数，考虑使用构造者模式。</p></blockquote><p>流程分析安排 Director<br />功能分开实现 Builder</p><p>流水线，流程分析<br />同样的流程，每一步做不一样的事情，结果也不同</p><h3 id="生成器的具体实现"><a class="markdownIt-Anchor" href="#生成器的具体实现"></a> 生成器的具体实现</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Potion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">string</span>&gt; parts = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();<span class="comment">//对接口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Potion</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> part</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        parts.Add(part);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\nPotion completed as below :&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> part <span class="keyword">in</span> parts)</span><br><span class="line">            Console.WriteLine(part);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span><span class="comment">//流程分析安排</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Potion potion;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Construct</span>(<span class="params">Builder theBuilder</span>)<span class="comment">///组装</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        potion = <span class="keyword">new</span> Potion();</span><br><span class="line">        theBuilder.BuildPartA(potion);</span><br><span class="line">        theBuilder.BuildPartB(potion);</span><br><span class="line">        theBuilder.BuildPartC(potion);</span><br><span class="line">        potion = GetProduct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Potion <span class="title">GetProduct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> potion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span><span class="comment">//实现功能</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPartA</span>(<span class="params">Object part</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPartB</span>(<span class="params">Object part</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuildPartC</span>(<span class="params">Object part</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PotionBuilder</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartA</span>(<span class="params">Object product</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        (product <span class="keyword">as</span> Potion).Add(<span class="string">&quot;瓶子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartB</span>(<span class="params">Object product</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        (product <span class="keyword">as</span> Potion).Add(<span class="string">&quot;水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildPartC</span>(<span class="params">Object product</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        (product <span class="keyword">as</span> Potion).Add(<span class="string">&quot;药剂&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director();</span><br><span class="line">        Potion product = <span class="literal">null</span>;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> PotionBuilder();</span><br><span class="line">        director.Construct(builder);</span><br><span class="line">        product = director.GetProduct();</span><br><span class="line">        product.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例-singleton"><a class="markdownIt-Anchor" href="#单例-singleton"></a> 单例 Singleton</h2><h3 id="单例的意图"><a class="markdownIt-Anchor" href="#单例的意图"></a> 单例的意图</h3><p>提供一个<strong>全局</strong>访问点来获取<strong>唯一</strong>的实例。</p><p>也即其使用的范围 -&gt; 全局 + 唯一的</p><h3 id="单例的具体实现"><a class="markdownIt-Anchor" href="#单例的具体实现"></a> 单例的具体实现</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Foo instance &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> Foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unity-中的单例值得注意的点-monobeheviour"><a class="markdownIt-Anchor" href="#unity-中的单例值得注意的点-monobeheviour"></a> Unity 中的单例值得注意的点 =&gt; monobeheviour</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameManager Instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Instance = <span class="keyword">this</span>;<span class="comment">//不要 new 一个新的 否则 丢失引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模板"><a class="markdownIt-Anchor" href="#单例模板"></a> 单例模板</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T _instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (_lock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _instance = <span class="keyword">new</span> T();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p>【Sast C# Class 4.1 泛型-类型系统的万金油】<a href="https://www.bilibili.com/video/BV1dQ4y1b766?vd_source=91b4ae86004267b4d5aa5f0c99c21e95">https://www.bilibili.com/video/BV1dQ4y1b766?vd_source=91b4ae86004267b4d5aa5f0c99c21e95</a></p>]]></content:encoded>
      
      
      
      <category domain="https://rdququ.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">面向对象</category>
      
      <category domain="https://rdququ.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">设计模式</category>
      
      
      <comments>https://rdququ.top/posts/68359e54/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>聊聊面向对象和其设计原则</title>
      <link>https://rdququ.top/posts/1e29cb18/</link>
      <guid>https://rdququ.top/posts/1e29cb18/</guid>
      <pubDate>Tue, 23 Jan 2024 07:40:01 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;重温面向对象&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重温面向对象&quot;&gt;&lt;/a&gt; 重温面向对象&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="重温面向对象"><a class="markdownIt-Anchor" href="#重温面向对象"></a> 重温面向对象</h2><span id="more"></span><ul><li>封装：隐藏内部实现</li><li>继承：复用现有代码</li><li>多态：改写对象行为</li></ul><p>研究何使用面向对象，我们究竟想做什么？</p><h3 id="面向对象的目的"><a class="markdownIt-Anchor" href="#面向对象的目的"></a> 面向对象的目的</h3><p>现实问题（复杂度） -&gt; 类 -&gt; 实例 (?)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectmyObj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装</p><p>假设你是军队指挥官，你手下统帅了数十种上万人的军队。当你命令部下向地方发起进攻的时候</p><p>你是会</p><blockquote><p>A 营的小陆向前走三步。向你的 11 点钟方向射击</p></blockquote><blockquote><p>B 连的小宋向左转 35 度，前进 5 步，3 分钟瞄准时间，炮口倾角 15 度，开火 3 分钟。</p></blockquote><blockquote><p>…</p></blockquote><p>还是</p><blockquote><p>A 营向甲点缓慢推进</p></blockquote><blockquote><p>B 连火力掩护</p></blockquote><p>还是</p><blockquote><p>给老子啃下***高地（乐</p></blockquote><p>显然，身为一军之长的你（作为最高层调用者）对军队中每个单位进行原子层级的微操是不合适的，军中的陆军单位，炮军单位，侦察单位所构成的网络的复杂度显然会超出你的想象，甚至于对于第二段对话中的战术决策，你也能够交给中层决策者去处理，你只需要做战略层面的决定即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">intmain()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    move(<span class="string">&quot;小陆&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    fire(<span class="string">&quot;小陆&quot;</span>,<span class="number">-30</span>);</span><br><span class="line"></span><br><span class="line">    rotate(<span class="string">&quot;小宋&quot;</span>，<span class="number">-35</span>);</span><br><span class="line"></span><br><span class="line">    move(<span class="string">&quot;小宋5&quot;</span>);</span><br><span class="line"></span><br><span class="line">    artillery_fire(<span class="number">3</span>,<span class="number">15</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassArmy</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    publicenumAdvanceSpeed</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Slow, Quick, Normal</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicenumArmyType</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Infantry, Artillery</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidAdvance(AdvanceSpeed speed, City targetPos)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidShield(Army target)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicArmy(...)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">intMain()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ArmyA = <span class="keyword">new</span> Army(...);</span><br><span class="line"></span><br><span class="line">    ArmyB = <span class="keyword">new</span> Army(...);</span><br><span class="line"></span><br><span class="line">    A.Advance(AdvanceSpeed.Normal, city_jia);</span><br><span class="line"></span><br><span class="line">    B.Shield(A);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassCollectiveArmy</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Army&gt; Armys = <span class="keyword">new</span> List();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    publicvoidAttack(Area targetPos)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicCollectiveArmy(...)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intMain()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    CollectiveArmycollectiveArmy = <span class="keyword">new</span> CollectiveArmy(...);</span><br><span class="line"></span><br><span class="line">    collectiveArmy.Attack(area)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事实上，现实业务的复杂度并没有减少，他只是被一个个对象包裹了起来，但是，新的代码显然易读，易拓展，易维护</p><p><strong>代码是写给人看的</strong></p><p>面向过程的“时序性”</p><p>面向对象作为一种编程范式，在面对超复杂问题时能顺应人脑的思考方式将逻辑层层包装成高级指令来帮助人<strong>寄存逻辑</strong>，<strong>减少重复作业</strong>。事实上，每一道指令本质上仍然由程序员发出，只是这些低级或者说底层指令被包裹成了高级指令，当我发出 A 军前进的时候，A 军中的每个士兵都接到了我前进的命令，这些命令由中层军官转达，而身为高层调用者的我只需要说一句话就可以了。这道前进的命令显然是在长期训练中我和士兵们约定好的(我实现的方法)，比如我说前进 1 的时候，士兵们快速前进，我说前进 2 的时候士兵缓慢前进。</p><p>我命令每个士兵的逻辑被寄存在了我的高级指令前进 num 中 <code>Advance(Num value)</code>, 所以我真正战斗的时候不需要记住小陆的脚怎么迈，小宋的枪怎么端，这都是我提前约定好的，在战斗(调用)时我只需要发布一道高级指令前进 num 就行。又<strong>好记</strong>，又<strong>节约时间</strong></p><p>再者，当我需要调整前进 1 指令下小陆的作战姿态时，我也只需要在训练时做更正就可以(修改函数实现)，而在战斗时(调用时)，我仍然只需要喊：<code>Advance(1)</code></p><h3 id="哪里能用到面向对象"><a class="markdownIt-Anchor" href="#哪里能用到面向对象"></a> 哪里能用到面向对象</h3><p>面向对象真好使啊，怪不得用了这么多年，怪不得学校还要教，那我们做啥都用面向对象，这样肯定没错——吗？</p><p>大部分同学在上程序设计周的时候老师都会布置那么道非常经典（土掉渣）的题目：<strong>学生管理系统</strong></p><p>很多同学框框整几个类然后开始写，如果从应试的角度来看，没错，你不用“面向对象”老师不给高分啊，可是同学们现在可以转过头来想象，你写的/你将要写的那些个学生管理系统有复杂到需要上面向对象吗？请大家从应试的角度转到应付事儿(合适)的角度上来().你在规定时间内去完成一个没什么人用的逻辑相当简单的控制台小系统，完全没有必要上面向对象这种大杀器。如果不理解我们可以采用&quot;极值法&quot;(听起来像高中数学解题方法)，你只去打印一个&quot;hello world&quot;, 肯定不会先 class person, 然后 person 里面声明并实现一个 talk, 然后你再 new 一个自己出来，最后 <code>me.Talk(&quot;hello world&quot;);</code> 闲的嘛这不是</p><p>希望大家通过这个小栗子可以明白面向对象乃至任意一种编程范式都不是绝对的在任何时候都能百分百发挥效能的，面向对象适合复杂系统，面向过程基于<strong>时序</strong>关系，当然在非常多的情况下我们会结合起来用。</p><p>他在这里合适才用他</p><p>一言以蔽之</p><blockquote><p><strong>No Silver Bullet 『没有银弹』</strong></p></blockquote><p>– · – · – 中场休息 5 分钟 – · – · –</p><h2 id="面向对象的设计原则"><a class="markdownIt-Anchor" href="#面向对象的设计原则"></a> 面向对象的设计原则</h2><h3 id="单一责任原则"><a class="markdownIt-Anchor" href="#单一责任原则"></a> 单一责任原则</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>一个类只允许有一个职责，即只有一个导致该类变更的原因。</p><p>也就是说一个类只负责一项业务，只做一件事情，只有一个职责</p><p>不仅仅是类，函数也是一个道理</p><h4 id="不好的设计"><a class="markdownIt-Anchor" href="#不好的设计"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassCardDisplay : MonoBehaviour</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicCard card;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI nameText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI descriptionText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI attackText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI healthText;</span><br><span class="line"></span><br><span class="line">    publicImage artworkImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    voidStart()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Draw();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidDraw()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        nameText.text = card.name;</span><br><span class="line"></span><br><span class="line">        descriptionText.text = card.description;</span><br><span class="line"></span><br><span class="line">        attackText.text = card.attack.ToString();</span><br><span class="line"></span><br><span class="line">        healthText.text = card.health.ToString();</span><br><span class="line"></span><br><span class="line">        artworkImage.sprite = card.artwork;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidChangeCardHP(<span class="built_in">int</span> hp)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        card.health = hp;</span><br><span class="line"></span><br><span class="line">        healthText.text = card.health.ToString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计"><a class="markdownIt-Anchor" href="#更好的设计"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassCardDisplay : MonoBehaviour</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI nameText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI descriptionText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI attackText;</span><br><span class="line"></span><br><span class="line">    publicTextMeshProUGUI healthText;</span><br><span class="line"></span><br><span class="line">    publicImage artworkImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidDraw(Card card)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        nameText.text = card.name;</span><br><span class="line"></span><br><span class="line">        descriptionText.text = card.description;</span><br><span class="line"></span><br><span class="line">        attackText.text = card.attack.ToString();</span><br><span class="line"></span><br><span class="line">        healthText.text = card.health.ToString();</span><br><span class="line"></span><br><span class="line">        artworkImage.sprite = card.artwork;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidChangeHealthText(<span class="built_in">int</span> amount)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        healthText.text = amount.ToString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassCardController : MonoBehaviour</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicCard card;</span><br><span class="line"></span><br><span class="line">    publicCardDisplay cardDisplay;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidStart()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cardDisplay.Draw(card);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidChangeHealth(<span class="built_in">int</span> amount)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        card.health+=amount;</span><br><span class="line"></span><br><span class="line">        cardDisplay.ChangeHealthText(card.health);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要，还可以抽离出卡牌的状态管理类并注册到卡牌控制器中。</p><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><blockquote><p>Do one thing, and do it well.</p></blockquote><h3 id="开闭原则"><a class="markdownIt-Anchor" href="#开闭原则"></a> 开闭原则</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>软件实体应该对扩展开放，对修改关闭。</p><p>开闭原则的优点在于可以在不改动原有代码的前提下给程序扩展功能。增加了程序的可扩展性，同时也降低了程序的维护成本。</p><h4 id="不好的设计-2"><a class="markdownIt-Anchor" href="#不好的设计-2"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassHealthPotion</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidUse()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;生命值恢复了100点!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassManaPotion</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidUse()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;魔法值恢复了100点!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidUseHealthPotion()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        HealthPotionhealthPotion = <span class="keyword">new</span> HealthPotion();</span><br><span class="line"></span><br><span class="line">        healthPotion.Use();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidUseManaPotion()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ManaPotionmanaPotion = <span class="keyword">new</span> ManaPotion();</span><br><span class="line"></span><br><span class="line">        manaPotion.Use();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计-2"><a class="markdownIt-Anchor" href="#更好的设计-2"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicinterfaceIPotion</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidUse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassHealthPotion : IPotion</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidUse()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;生命值恢复了100点!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassManaPotion : IPotion</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidUse()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;魔法值恢复了100点!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    privateIPotion potion;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidUsePotion()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        potion.Use();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h4><p>使用抽象(接口和抽象类)、继承和组合等实现</p><p>面对新需求，可以通过扩展来实现变化。</p><p>在拓展新功能的时候，尽量不要修改原有代码。</p><h3 id="接口隔离原则"><a class="markdownIt-Anchor" href="#接口隔离原则"></a> 接口隔离原则</h3><h4 id="定义-3"><a class="markdownIt-Anchor" href="#定义-3"></a> 定义</h4><p>不应强迫客户端依赖它不使用的方法，类间的依赖关系应该建立在最小的接口上。</p><p>上例子</p><h4 id="不好的设计-3"><a class="markdownIt-Anchor" href="#不好的设计-3"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicinterfaceIEquipment</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidAttack();</span><br><span class="line"></span><br><span class="line">    voidDefend();</span><br><span class="line"></span><br><span class="line">    voidRepair();</span><br><span class="line"></span><br><span class="line">    voidUpgrade();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计-3"><a class="markdownIt-Anchor" href="#更好的设计-3"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicinterfaceIAttackable</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidAttack();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicinterfaceIDefendable</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidDefend();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicinterfaceIRepairable</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidRepair();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicinterfaceIUpgradeable</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidUpgrade();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h4><p>接口隔离原则强调客户端不应该依赖它不需要的接口</p><h3 id="里氏替换原则继承"><a class="markdownIt-Anchor" href="#里氏替换原则继承"></a> 里氏替换原则(继承)</h3><h4 id="定义-4"><a class="markdownIt-Anchor" href="#定义-4"></a> 定义</h4><p>子类的实例必须能替换掉所有父类的实例。</p><p>预防继承导致的侵入性问题。父类更改任意方法都必须考虑在修改这个方法后其子类的功能会不会发生异常。</p><h4 id="不好的设计-4"><a class="markdownIt-Anchor" href="#不好的设计-4"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassRectangle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvirtualint Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    publicvirtualint Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvirtualintArea() =&gt; Width*Height;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassSquare : Rectangle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicoverrideint Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicoverrideint Height</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> =&gt; Width;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> =&gt; Width = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicoverrideintArea() =&gt; Width*Width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicclassProgram</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        staticvoidMain(<span class="built_in">string</span>[] args)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Squarerectangle = <span class="keyword">new</span> Square();</span><br><span class="line"></span><br><span class="line">            rectangle.Width = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">            rectangle.Height = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            intarea = rectangle.Area();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Area: <span class="subst">&#123;area&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计-4"><a class="markdownIt-Anchor" href="#更好的设计-4"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicabstractclassQuadrangle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicabstractint Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    publicabstractint Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicabstractintArea();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassRectangle : Quadrangle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicoverrideint Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    publicoverrideint Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicoverrideintArea() =&gt; Width*Height;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassSquare : Quadrangle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicoverrideint Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicoverrideint Height</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> =&gt; Width;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> =&gt; Width = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicoverrideintArea() =&gt; Width*Width;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicclassProgram</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        staticvoidMain(<span class="built_in">string</span>[] args)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Quadranglerectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line">            rectangle.Width = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">            rectangle.Height = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            intarea = rectangle.Area();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Area: <span class="subst">&#123;area&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Quadranglesquare = <span class="keyword">new</span> Square();</span><br><span class="line"></span><br><span class="line">            square.Width = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">            square.Height = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            area = square.Area();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Area: <span class="subst">&#123;area&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-4"><a class="markdownIt-Anchor" href="#总结-4"></a> 总结</h4><p>检验是否真正符合继承关系，以避免继承的滥用。</p><p>从 behavior 出发的设计</p><p>正方形是一种特殊的长方形，但是从行为的角度来看，一个 Square 不是一个 Rectangle.</p><p><strong>Rectangle 的 Width 和 Height 是无依赖关系</strong>，但是 Square 的 Width 和 Height 是相互依赖的</p><p>如何解决？</p><p>abstract</p><p>子类无需重写父类方法而是实现其抽象方法</p><h3 id="最少知识原则"><a class="markdownIt-Anchor" href="#最少知识原则"></a> 最少知识原则</h3><h4 id="定义-5"><a class="markdownIt-Anchor" href="#定义-5"></a> 定义</h4><p>每个单元对其他单元只拥有有限的知识，只了解与当前单元紧密联系的单元；</p><p>对于对象 O 中的一个方法 F, F 方法仅能访问如下这些类型的对象：</p><ol><li>O 对象自身；</li><li>F 方法的参数对象；</li><li>任何在 F 方法内创建的对象；</li><li>O 对象直接依赖的对象；</li></ol><h4 id="不好的设计-5"><a class="markdownIt-Anchor" href="#不好的设计-5"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidJoinTeam(Guild guild)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Teamteam = guild.FindTeam();</span><br><span class="line"></span><br><span class="line">        team.AddPlayer(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassGuild</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicTeam team = <span class="keyword">new</span> Team();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicTeamFindTeam()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        returnteam;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassTeam</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicstring name;</span><br><span class="line"></span><br><span class="line">    List&lt;Player&gt; members = <span class="keyword">new</span> List&lt;Player&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidAddPlayer(Player player)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        members.Add(player);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计-5"><a class="markdownIt-Anchor" href="#更好的设计-5"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidJoinTeam(Guild guild)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        guild.AddPlayer(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassGuild</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicTeam team = <span class="keyword">new</span> Team();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicTeamFindTeam()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        returnteam;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidAddPlayer(Player player)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        team.AddPlayer(player);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassTeam</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicstring name;</span><br><span class="line"></span><br><span class="line">    List&lt;Player&gt; members = <span class="keyword">new</span> List&lt;Player&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    publicvoidAddPlayer(Player player)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        members.Add(player);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则"><a class="markdownIt-Anchor" href="#依赖倒置原则"></a> 依赖倒置原则</h3><h4 id="定义-6"><a class="markdownIt-Anchor" href="#定义-6"></a> 定义</h4><p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；</p><h4 id="不好的设计-6"><a class="markdownIt-Anchor" href="#不好的设计-6"></a> 不好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidSpellFireBall()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fireball!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoidSpellFrostBall()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Frostball!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicvoidGame</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicstaticvoidMain()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Playerplayer = <span class="keyword">new</span> Player();</span><br><span class="line"></span><br><span class="line">        player.SpellFireBall();</span><br><span class="line"></span><br><span class="line">        player.SpellFrostBall();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更好的设计-6"><a class="markdownIt-Anchor" href="#更好的设计-6"></a> 更好的设计</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">publicinterfaceISpell</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    voidCast();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassFireBall : ISpell</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidCast()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fireball!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassFrostBall : ISpell</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidCast()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Frostball!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicclassPlayer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicvoidSpell(ISpell spell)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        spell.Cast();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicvoidGame</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    publicstaticvoidMain()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Playerplayer = <span class="keyword">new</span> Player();</span><br><span class="line"></span><br><span class="line">        player.Spell(<span class="keyword">new</span> FireBall());</span><br><span class="line"></span><br><span class="line">        player.Spell(<span class="keyword">new</span> FrostBall());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="雪中送炭和锦上添花设计模式"><a class="markdownIt-Anchor" href="#雪中送炭和锦上添花设计模式"></a> 雪中送炭和锦上添花——设计模式</h2><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p>1.<strong>设计模式 - 可复用面向对象软件的基础</strong></p><ol start="2"><li>游戏设计模式</li><li>设计模式与完美游戏开发</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://rdququ.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">面向对象</category>
      
      
      <comments>https://rdququ.top/posts/1e29cb18/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不透明物体与半透明物体边缘算法与Unity Shader Graph 实现</title>
      <link>https://rdququ.top/posts/223f372/</link>
      <guid>https://rdququ.top/posts/223f372/</guid>
      <pubDate>Tue, 12 Dec 2023 11:25:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前置知识&quot;&gt;&lt;/a&gt; 前置知识&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><span id="more"></span><h3 id="归一化空间坐标-ndknormalized-device-coordinates"><a class="markdownIt-Anchor" href="#归一化空间坐标-ndknormalized-device-coordinates"></a> 归一化空间坐标 NDK(Normalized Device Coordinates)</h3><p>在齐次裁剪空间的基础上进行透视除法或称齐次除法, 得到的坐标叫做NDC空间坐标。</p><p><a href="https://zhuanlan.zhihu.com/p/102758967">一篇文章彻底弄懂齐次裁剪 - 知乎 (zhihu.com)</a></p><h4 id="透视除法-齐次除法perspective-division-homogeneous-division"><a class="markdownIt-Anchor" href="#透视除法-齐次除法perspective-division-homogeneous-division"></a> 透视除法-齐次除法(<strong>perspective division</strong>-<strong>homogeneous division)</strong></h4><p>就是将齐次裁剪空间坐标positionCS的X,Y,Z分量都除以W分量。</p><p><a href="https://www.jianshu.com/p/7e701d7bfd79">写给大家看的“透视除法” —— 齐次坐标和投影 - 简书 (jianshu.com)</a></p><p><img src="https://pic4.zhimg.com/80/v2-4baca450c51c7f0eea873c42eeda0eef_720w.webp" alt="" /></p><h2 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理"></a> 算法原理</h2><h2 id="unity-shader-graph-实现"><a class="markdownIt-Anchor" href="#unity-shader-graph-实现"></a> Unity Shader Graph 实现</h2><h3 id="scenedepth"><a class="markdownIt-Anchor" href="#scenedepth"></a> SceneDepth</h3><blockquote><p>Provides access to the current  <strong>Camera</strong> 's depth buffer using input  <strong>UV</strong> , which is expected to be normalized screen coordinates.<br />Note: Depth buffer access requires depth buffer to be enabled on the active  <strong>Render Pipeline</strong> . This process is different per  <strong>Render Pipeline</strong> . It is recommended you read the documentation of your active <strong>Render Pipeline</strong> for information on enabling the depth buffer. If the depth buffer is unavailable this <a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Packages/com.unity.shadergraph%406.9/manual/Node.html">Node</a> will return mid grey.</p></blockquote><p>也就是说SceneDepth Node是对深度纹理进行获取的节点，只不过获取的方法不同，而深度纹理中存储的是NDC坐标的深度值。</p><p><img src="https://pic4.zhimg.com/80/v2-199f0cb63bdba7f81de4c826056dcbff_720w.webp" alt="img" /></p><ul><li>Linear01获取的是线性的范围为[0,1]的深度值。<blockquote><p>想要把Raw Depth转换成线性 ，并且从近平面到远平面为0-1的深度，就需要Linear 01 Depth，这时0.5深度就是视锥体一半的位置。</p></blockquote></li><li>Raw也就是深度纹理中存储的非线性，范围为[0,1]的值。<blockquote><p>表示深度缓冲的原始数据，普通的深度缓冲使用32位的浮点数表示深度，相机近平面的深度为0，远平面的深度为1。而Unity 使用了Reversed Z，这就使得近平面深度为1，而远平面深度为0，另外，如果相机的投影矩阵不是正交矩阵，那么深度缓冲中的深度就不是线性的，举个例子就是深度0.5代表的地方并不是视锥体一半的位置。</p></blockquote></li><li>Eye获取的是视角空间下的线性深度值，范围为[near, far]。<blockquote><p>Linear Eye Depth中深度为1表示沿着摄像机Z轴，距离为1个单位的地方，2就是距离两个单位的地方，以此类推。</p></blockquote></li></ul><h3 id="screenposition"><a class="markdownIt-Anchor" href="#screenposition"></a> ScreenPosition</h3><blockquote><p>Provides access to the mesh vertex or fragment’s <strong>Screen Position</strong> .</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-439252aa4b98dac54ced99bf1460a58e_720w.webp" alt="img" /></p><ul><li>ScreenPosition在Default选项下会进行齐次除法运算（即除以w分量），这里的w范围为[0,1],也就是NDC下的w分量。经过透视除法的，左下角是（0，0）右上角是（1，1）的屏幕空间</li><li>在Raw选项下，不会进行齐次除法运算,这里的w范围是[Near, Far],是Clip Space中的w分量。未经过透视除法的，左下角是（0，0）右上角是（1，1）的屏幕空间</li><li>Center: 经过透视除法的，左下角是（-1，-1）右上角是（1，1）的屏幕空间</li><li>Tiled: 经过透视除法的，分成上下均等的四块组成，每块左下角是（0，0）右上角是（1，1）的屏幕空间</li></ul><p>在这里ScreenPosition的w分量的含义也就是ClipSpace下的w分量，范围是[Near, Far],而当xy除以w分量后，越远的顶点也就会除以越大的w分量，就会产生透视现象。</p><h3 id="存疑之处与我的观点证明"><a class="markdownIt-Anchor" href="#存疑之处与我的观点证明"></a> 存疑之处与我的观点/证明</h3><p>博主<a href="https://www.zhihu.com/people/lute-li">Lute Li </a>，认为</p><blockquote><p>（Scene Depth是除开透明模型之外的深度，Screen Position是所有模型的深度，相减就是边缘）</p></blockquote><p>出处<a href="https://zhuanlan.zhihu.com/p/109547098">从头学ShaderGraph 5-护盾材质 - 知乎 (zhihu.com)</a></p><p><img src="https://pic2.zhimg.com/80/v2-fea83d5ed062c6bfe5dc8221e2d5d999_720w.webp" alt="" /></p><p><strong>(Vertex Shader) =&gt; Clip Space =&gt; (透视除法) =&gt; NDC =&gt; (视口变换) =&gt; Window Space =&gt; (Fragment Shader)</strong></p><p>现象很好观察，但是不知道原理，翻遍了官方文档和网上的教程也没能得到一个足够有说服力的解释，现在可以知道 SceneDepth 的 Eye 获取的是视角空间下的线性深度值，范围为[near, far]，ScreenPosition 的 w 分量是是 Clip Space 中未经过透视除法的值，范围也是[near, far]。我们知道物体自Eye/View/Camera Space(这玩意名字真多)到Cliping Space 要经过一次透视变换，或者说透视除法，所以实际上，Screen Graph 的 w 分量也许就是 Eye Space 下到相机的距离(不是深度，所以也存储了透明物体的距离)</p><p><img src="image/%E4%B8%8D%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E4%B8%8E%E5%8D%8A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E8%BE%B9%E7%BC%98%E7%AE%97%E6%B3%95%E4%B8%8EUnity-Shader-Graph-%E5%AE%9E%E7%8E%B0/1702390346535.png" alt="1702390346535" /></p><p>上图的实验一定程度上看可以证明上文的观点。</p><p>有趣的是，当我们把 Surface Type 修改为Transparent, 场景中的透明与不透明物体的交界处出现了一道淡淡的白线</p><p><img src="image/%E4%B8%8D%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E4%B8%8E%E5%8D%8A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E8%BE%B9%E7%BC%98%E7%AE%97%E6%B3%95%E4%B8%8EUnity-Shader-Graph-%E5%AE%9E%E7%8E%B0/1702390608834.png" alt="1702390608834" /></p><p>我们将 Comparison 节点的输入值 B 调大，交界处出现了明显的白线</p><p><img src="image/%E4%B8%8D%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E4%B8%8E%E5%8D%8A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E8%BE%B9%E7%BC%98%E7%AE%97%E6%B3%95%E4%B8%8EUnity-Shader-Graph-%E5%AE%9E%E7%8E%B0/1702390681409.png" alt="1702390681409" /></p><p><img src="image/%E4%B8%8D%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E4%B8%8E%E5%8D%8A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E8%BE%B9%E7%BC%98%E7%AE%97%E6%B3%95%E4%B8%8EUnity-Shader-Graph-%E5%AE%9E%E7%8E%B0/1702390730401.png" alt="1702390730401" /></p><p>我们知道，初始输出的两个节点的取值范围都是[n,f]，所以当我们把对比节点的输入值B调到1的时候，边界就很明显了。</p><p>现在，结果已经呼之欲出了，Scene Depth 节点的 Eye 输出的是深度值，我们知道，透明物体默认不会写入深度缓冲，Screen Position 输出的是简单的距离，故而相减可以得到边界。</p><h2 id="参考资料与引用"><a class="markdownIt-Anchor" href="#参考资料与引用"></a> 参考资料与引用</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/535898515">unity urp 20 SceneDepth和ScreenPosition.w - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/347698766">Shader Graph中的Scene Depth和Screen Position - 知乎 (zhihu.com)</a></li><li><a href="https://www.bilibili.com/video/BV1sa411C7Xd/">2022版Unity Shader Graph教程04 水面 (上) 超简单ShaderGraph入门_哔哩哔哩_bilibili</a></li><li><a href="https://zhuanlan.zhihu.com/p/102758967">一篇文章彻底弄懂齐次裁剪 - 知乎 (zhihu.com)</a></li><li><a href="https://www.jianshu.com/p/7e701d7bfd79">写给大家看的“透视除法” —— 齐次坐标和投影 - 简书 (jianshu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/493733502">Unity Shader Graph 中深度纹理（Depth Texture）和屏幕空间坐标（Screen Position） - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/109547098">从头学ShaderGraph 5-护盾材质 - 知乎 (zhihu.com)</a></li><li><a href="https://carmencincotti.com/2022-05-02/homogeneous-coordinates-clip-space-ndc/#homogeneous-coordinates">Homogeneous Coordinates, Clip Space, and NDC | WebGPU | Carmen's Graphics Blog — 齐次坐标、裁剪空间和 NDC |网络GPU |Carmen 的图形博客 (carmencincotti.com)</a></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/223f372/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unity_GC_浅谈</title>
      <link>https://rdququ.top/posts/e44777a7/</link>
      <guid>https://rdququ.top/posts/e44777a7/</guid>
      <pubDate>Sun, 10 Dec 2023 05:50:22 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;unity-底层的内存分配&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unity-底层的内存分配&quot;&gt;&lt;/a&gt; Unity 底层的内存分配&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="unity-底层的内存分配"><a class="markdownIt-Anchor" href="#unity-底层的内存分配"></a> Unity 底层的内存分配</h2><span id="more"></span><h3 id="托管内存"><a class="markdownIt-Anchor" href="#托管内存"></a> 托管内存</h3><p>Mono 和 IL2CPP 的脚本虚拟机(virtual machines =&gt; VMs)实现了托管内存系统(脚本内存系统)。这些VMs提供了数种受控内存环境。</p><h4 id="managed-heap-托管堆"><a class="markdownIt-Anchor" href="#managed-heap-托管堆"></a> Managed Heap 『托管堆』</h4><p>GC 自动控制的内存区域。</p><h4 id="scripting-stack-脚本栈"><a class="markdownIt-Anchor" href="#scripting-stack-脚本栈"></a> Scripting Stack 『脚本栈』</h4><p>在应用程序进入和退出任何代码范围时构建和展开</p><h4 id="native-vm-memory-本地虚拟机内存"><a class="markdownIt-Anchor" href="#native-vm-memory-本地虚拟机内存"></a> Native VM Memory 『本地虚拟机内存』</h4><p>包含与 Unity 脚本层相关的内存，大多数情况下不需要主动管理。</p><h3 id="c-非托管内存"><a class="markdownIt-Anchor" href="#c-非托管内存"></a> C# 非托管内存</h3><p>允许编写 C# 代码来访问本机内存以微调内存分配。<br />可以使用 Unity 核心 API 中的 Unity.Collections 命名空间（包括 NativeArray）和 Unity Collections 包中的数据结构来访问 C# 非托管内存。如果使用 Unity 的 C# Job 系统或 Burst，则必须使用 C# 非托管内存。</p><h3 id="native-memory-本机内存"><a class="markdownIt-Anchor" href="#native-memory-本机内存"></a> Native Memory 『本机内存』</h3><h2 id="unity-应用的-gc-算法"><a class="markdownIt-Anchor" href="#unity-应用的-gc-算法"></a> Unity 应用的 GC 算法</h2><h3 id="boehmgc"><a class="markdownIt-Anchor" href="#boehmgc"></a> BoehmGC</h3><h4 id="boehmgc-算法原理"><a class="markdownIt-Anchor" href="#boehmgc-算法原理"></a> BoehmGC 算法原理</h4><h4 id="boehmgc-的内存管理"><a class="markdownIt-Anchor" href="#boehmgc-的内存管理"></a> BoehmGC 的内存管理</h4><h4 id="boehmgc-算法实现"><a class="markdownIt-Anchor" href="#boehmgc-算法实现"></a> BoehmGC 算法实现</h4><h4 id="mono-与-il2cpp-中的-boehmgc"><a class="markdownIt-Anchor" href="#mono-与-il2cpp-中的-boehmgc"></a> MONO 与 IL2CPP 中的 BoehmGC</h4><h3 id="渐进式-gc"><a class="markdownIt-Anchor" href="#渐进式-gc"></a> 渐进式 GC</h3><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/623849906">Unity 垃圾回收GC的原理？</a></li><li><a href="https://zhuanlan.zhihu.com/p/265217138">Unity GC 学习总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/41023320">解读MONO内存管理和回收！</a></li><li><a href="https://zhuanlan.zhihu.com/p/41398507">解读MONO内存管理：BOEHM GC原理及总结</a></li><li><a href="https://juejin.cn/post/6966954993869914119">Unity3D托管堆BoehmGC算法学习-内存分配篇</a></li><li><a href="https://juejin.cn/post/6968400262629163038">Unity3D托管堆BoehmGC算法学习-垃圾回收篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/381859536?">【笔记】Unity内存分配和回收的底层原理</a></li><li><a href="https://docs.unity3d.com/Manual/performance-memory-overview.html">Memory in Unity Unity</a></li><li><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">Garbage collection (computer science)</a></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/e44777a7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UnityshaderGraph学习2021版</title>
      <link>https://rdququ.top/posts/1fbb4100/</link>
      <guid>https://rdququ.top/posts/1fbb4100/</guid>
      <pubDate>Fri, 08 Dec 2023 05:02:30 GMT</pubDate>
      
      <description>&lt;p&gt;学习笔记&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>学习笔记</p><span id="more"></span><h2 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h2><p>选择 URP 模板创建不需要配置环境<br />普通 3D 项目，包管理器安装 Universal RP, visual effect graph，设置中正常配置 Graphics</p><h2 id="光照模型"><a class="markdownIt-Anchor" href="#光照模型"></a> 光照模型</h2><p>Create =&gt; ShaderGraph =&gt; URP =&gt; Lit Shader Graph</p><p>输入属性节点：<br /><img src="%E8%BE%93%E5%85%A5%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9.png" alt="输入属性节点" /></p><p>属性设置：<br /><img src="%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE.png" alt="属性设置" /></p><ul><li>Precision [精度] [single/half] half 性能更好</li></ul><p>在 Universal 中</p><ul><li><p>Material [材质]</p><ul><li>[sprite Custom] 自定义精灵</li><li>[sprite Lit] 精灵光照</li><li>[sprite Unlit] 精灵非光照</li><li>[Decal] 贴花</li><li>[Lit] 光照</li><li>[Unlit] 非光照</li></ul></li><li><p>Allow Material Override [允许材质覆盖] [勾选] 可以通过材质检查器修改某些图形属性。</p></li><li><p>workflow [工作流] [Specular/Metallic] [勾选] 镜面高光/金属工作流</p></li><li><p>Surface Type [表面类型] [Opaque/Transparent] [半透明/不透明]</p></li><li><p>Render Face [渲染面] [Front/Back/Double] [正面/背面/双面]</p></li><li><p>Depth Write [深度写入] [Auto/Force Enabled/Force Disabled] [自动/强制开启/强制关闭]</p></li><li><p>Depth Test [深度测试] [Never/Less/Equal/LessEqual/Greater/NotEqual/GreaterEqual/Always] [从不/小于/等于/小于等于/大于/不等于/大于等于/总是]</p></li><li><p>Alpha Clipping [Alpha裁剪] [勾选]</p></li><li><p>Receive Shadows [接收阴影] [勾选]</p></li><li><p>Fragment Normal Space [片段法线空间] [Tangent/World/View] [切线/世界/视图]</p></li><li><p>Clear Coat [清漆] [勾选]</p></li><li><p>Custom Editor GUI [自定义编辑器GUI]</p></li><li><p>Supports VFXGRAph [支持VFXGRAph] [勾选]</p></li></ul><p>顶点着色器:<br /><img src="%E9%A1%B6%E7%82%B9%E7%9D%80%E8%89%B2%E5%99%A8.png" alt="顶点着色器" /></p><p>片段着色器:<br /><img src="%E7%89%87%E5%85%83%E7%9D%80%E8%89%B2%E5%99%A8.png" alt="片元着色器" /></p><p>乘法节点 Multiply: 颜色叠加</p><h3 id="fragment"><a class="markdownIt-Anchor" href="#fragment"></a> Fragment</h3><h4 id="base-color"><a class="markdownIt-Anchor" href="#base-color"></a> Base Color</h4><p>主贴图，展现了模型的基本纹理<br />可以新建一个 Texture2D 属性，然后将其作为输入<br /><img src="UnityShaderGraphBaseColor.png" alt="UnityShaderGraphBaseColor" /></p><p>MainTexture 保持默认</p><h4 id="normal"><a class="markdownIt-Anchor" href="#normal"></a> Normal</h4><p><img src="UnityShaderGraphNormal.png" alt="UnityShaderGraphNormal" /></p><p>注意 Sample Texture 2D 的 Type 要设置为 Normal<br />NormalTexture 的 Mode 选择 Normal Map</p><h4 id="metallic"><a class="markdownIt-Anchor" href="#metallic"></a> Metallic</h4><p><img src="UnityShaderGraphMetallic.png" alt="UnityShaderGraphMetallic" /><br />保持默认</p><h4 id="smoothness"><a class="markdownIt-Anchor" href="#smoothness"></a> Smoothness</h4><p><img src="UnityShaderGraphSmoothness.png" alt="UnityShaderGraphSmoothness" /></p><p>输出金属光泽度的 Alpha 通道与 Smoothness 通过 Multiply 乘法节点相乘, 得到输出值</p><h4 id="emission"><a class="markdownIt-Anchor" href="#emission"></a> Emission</h4><p><img src="UnityShaderGraphEmission.png" alt="UnityShaderGraphEmission" /><br />自发光贴图与类型为 Boolean Keywork 的 EmissiveTexture 相乘来控制是否自发光，得到其输出值与 EmissionColor 相乘得到最终的输出值</p><h4 id="ao"><a class="markdownIt-Anchor" href="#ao"></a> AO</h4><p><img src="UnityShaderGraphAO.png" alt="UnityShaderGraphAO" /><br />保持默认</p><h3 id="sub-graph"><a class="markdownIt-Anchor" href="#sub-graph"></a> Sub Graph</h3><p>框选中对应节点右击 Convert to =&gt; Sub-graph</p><h3 id="轮廓光边缘光"><a class="markdownIt-Anchor" href="#轮廓光边缘光"></a> 轮廓光/边缘光</h3><p>Fresnel Effect</p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/1fbb4100/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AABB_Plane_intersection原理详解及Unity实现</title>
      <link>https://rdququ.top/posts/2c23d1d4/</link>
      <guid>https://rdququ.top/posts/2c23d1d4/</guid>
      <pubDate>Tue, 05 Dec 2023 13:39:39 GMT</pubDate>
      
      <description>&lt;p&gt;起因是我在学习 runtime 的 mesh 切割算法，需要判断目标 mesh 是否和切面相交（不相交的话我就不需要去处理了）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>起因是我在学习 runtime 的 mesh 切割算法，需要判断目标 mesh 是否和切面相交（不相交的话我就不需要去处理了）</p><span id="more"></span><h2 id="前提知识"><a class="markdownIt-Anchor" href="#前提知识"></a> 前提知识</h2><p>Unity 的 mesh 和 collider 都使用 AABB 包围盒</p><h3 id="什么是-aabb-包围盒"><a class="markdownIt-Anchor" href="#什么是-aabb-包围盒"></a> 什么是 AABB 包围盒？</h3><p>AABB ==&gt; Axis Aligned Bounding Box (轴对齐边界框)</p><p>AABB（轴对齐边界框）是一个 3D 框。它的宽度/高度/深度不必相等，但宽度始终与 X 轴对齐，高度与 Y 轴对齐，深度与 Z 轴对齐。也就是说，这个盒子是不能旋转的。</p><h3 id="如何表示-aabb"><a class="markdownIt-Anchor" href="#如何表示-aabb"></a> 如何表示 AABB？</h3><p>有两种常见的方法，存储最左边和最右边的角，或者存储中心点和盒子在每侧延伸多远的向量。</p><p>第一种：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> AABB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 min;</span><br><span class="line">    <span class="keyword">public</span> Vector3 max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> AABB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 center;</span><br><span class="line">    <span class="keyword">public</span> Vector3 extents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image/AABB-Plane-intersection%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8AUnity%E5%AE%9E%E7%8E%B0/1703511283350.png" alt="" title="AABB表示法" /></p><h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><p>为了测试 AABB 和平面是否相交，我们首先必须将 AABB 的每个顶点投影到平面的法线上。这使我们 AABB 的所有顶点都在一条线上。</p><p>然后，我们检查离平面最远的顶点。如果与顶点对角线相对的顶点位于平面的另一侧，则我们有一个交点。</p><p>通用的 C# 代码如下，无论你的 AABB 是如何表示的(max/min 或 center/extents)，只需要稍作修改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test if AABB b intersects plane p</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">TestAABBPlane</span>(<span class="params">AABB b, Plane p</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Convert AABB to center-extents representation</span></span><br><span class="line">    Point c = (b.max + b.min) * <span class="number">0.5f</span>; <span class="comment">// Compute AABB center</span></span><br><span class="line">    Point e = b.max - c; <span class="comment">// Compute positive extents</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the projection interval radius of b onto L(t) = b.c + t * p.n</span></span><br><span class="line">    <span class="built_in">float</span> r = e[<span class="number">0</span>]*Abs(p.n[<span class="number">0</span>]) + e[<span class="number">1</span>]*Abs(p.n[<span class="number">1</span>]) + e[<span class="number">2</span>]*Abs(p.n[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute distance of box center from plane</span></span><br><span class="line">    <span class="built_in">float</span> s = Dot(p.n, c) - p.d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Intersection occurs when distance s falls within [-r,+r] interval</span></span><br><span class="line">    <span class="keyword">return</span> Abs(s) &lt;= r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让我们来解析这段代码"><a class="markdownIt-Anchor" href="#让我们来解析这段代码"></a> 让我们来解析这段代码</h3><ol><li>函数传入了目标 Mesh 的 AABB，和目标平面</li><li>进入后的两行假设你的 AABB 是用 max/min 表示的，如果你可以轻松调取 AABB 的 center 和 extents，那么这两行是可以被跳过的</li><li>下一段代码计算了 AABB 的投影半径，这个半径是 AABB 投影到平面法线上的最大距离。</li><li>其取 AABB 的范围和平面法线的绝对值的点积，用于确保计算出的长度是正值，因为两个向量中的元素都是正值或零。<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">∣</mo><msub><mi>n</mi><mi>x</mi></msub><mo stretchy="false">∣</mo><mo separator="true">,</mo><mo stretchy="false">∣</mo><msub><mi>n</mi><mi>y</mi></msub><mo stretchy="false">∣</mo><mo separator="true">,</mo><mo stretchy="false">∣</mo><msub><mi>n</mi><mi>z</mi></msub><mo stretchy="false">∣</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mover accent="true"><mi>e</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">∣</mo><mover accent="true"><mi>e</mi><mo>⃗</mo></mover><mo stretchy="false">∣</mo><mo stretchy="false">∣</mo><mover accent="true"><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo stretchy="false">∣</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><mo stretchy="false">∣</mo><mover accent="true"><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo stretchy="false">∣</mo><mo>=</mo><mn>1</mn><mspace linebreak="newline"></mspace><mover accent="true"><mi>e</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">∣</mo><mover accent="true"><mi>e</mi><mo>⃗</mo></mover><mo stretchy="false">∣</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">n&#x27; = (\lvert n_{x} \rvert,\lvert n_{y} \rvert,\lvert n_{z} \rvert) \\ \vec{e} \cdot \vec{n&#x27;} = \lvert\vec{e} \rvert \lvert\vec{n&#x27;} \rvert \cos \theta \\ \lvert\vec{n&#x27;} \rvert =1 \\\vec{e} \cdot \vec{n&#x27;} = \lvert\vec{e} \rvert  \cos \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mopen">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9608919999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9608919999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.246892em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2108919999999999em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mopen">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9608919999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.246892em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.2108919999999999em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9608919999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.246892em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9608919999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9608919999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6778919999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.246892em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p></li><li>下面计算了 AABB 中心点到平面的距离，计为 s</li><li>最后的返回值即为 AABB 自身在平面法线上的距离和其中心到平面距离长短的判断</li></ol><h3 id="unity-实现"><a class="markdownIt-Anchor" href="#unity-实现"></a> Unity 实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">BoundPlaneIntersect</span>(<span class="params">Mesh mesh, <span class="keyword">ref</span> Plane plane</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Compute projection interval radius</span></span><br><span class="line">        <span class="built_in">float</span> r = mesh.bounds.extents.x * Mathf.Abs(plane.normal.x) +</span><br><span class="line">            mesh.bounds.extents.y * Mathf.Abs(plane.normal.y) +</span><br><span class="line">            mesh.bounds.extents.z * Mathf.Abs(plane.normal.z);<span class="comment">//做点乘，得出mesh包围盒的范围在平面法线上的投影，包围盒在平面法线方向上的最大距离</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute distance of box center from plane</span></span><br><span class="line">        <span class="built_in">float</span> s = Vector3.Dot(plane.normal, mesh.bounds.center) - (-plane.distance);<span class="comment">//前面点乘得mesh中心在平面法线上的投影，这是为了确保计算出的距离和后面的平面距离在同一方向</span></span><br><span class="line">        <span class="comment">//如果法线面朝内，后- (-plane.distance)为正，前mesh中心在与相对原点相交且与平面平行的平面‘靠近平面的一侧，Vector3.Dot(plane.normal, mesh.bounds.center)为负，符合逻辑</span></span><br><span class="line">        <span class="comment">//因为mesh中心和平面在同一侧，距离为相见</span></span><br><span class="line">        <span class="comment">//若mesh中心在与 相对原点相交且与平面平行的平面‘ 远离平面的一侧，就是说mesh中心与平面中间相隔了一个原点，那么前后就都是同号，符合逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Intersection occurs when distance s falls within [-r,+r] interval</span></span><br><span class="line">        <span class="keyword">return</span> Mathf.Abs(s) &lt;= r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ol><li><a href="https://gdbooks.gitbooks.io/3dcollisions/content/Chapter1/aabb.html">AABB - Axis Aligned Bounding Box</a></li><li><a href="https://docs.unity.cn/cn/2021.3/ScriptReference/Bounds.html">Bounds-Unity_Documentation</a></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/2c23d1d4/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
