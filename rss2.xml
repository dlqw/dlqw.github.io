<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>蛐蛐的软件开发世界</title>
    <link>https://rdququ.top/</link>
    
    <atom:link href="https://rdququ.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>正在学习unity中</description>
    <pubDate>Fri, 15 Dec 2023 14:32:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>test</title>
      <link>https://rdququ.top/posts/d87f7e0c/</link>
      <guid>https://rdququ.top/posts/d87f7e0c/</guid>
      <pubDate>Fri, 15 Dec 2023 13:07:25 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;贝塞尔曲线&quot;&gt;&lt;a href=&quot;#贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;贝塞尔曲线&quot;&gt;&lt;/a&gt;贝塞尔曲线&lt;/h1&gt;&lt;p&gt;平滑的曲线，计算机图形学的天堂，线性代数的产物&lt;br&gt;同时这篇文章也是关于嵌入html与js的测试&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h1><p>平滑的曲线，计算机图形学的天堂，线性代数的产物<br>同时这篇文章也是关于嵌入html与js的测试</p><span id="more"></span><p><strong>贝塞尔曲线方程</strong></p><p>$ P(t)= {\textstyle \sum<em>{i=0}^{n}} P_iB</em>{i,n}(t),t\in [0,1] $</p><p>对于$ i\in N^* $</p><p>$ B_{i,n}(t)=C_n^it^i(1-t)^{n-i}=\frac{n!}{i!(n-i)!}t^i(1-t)^{n-i} $</p><h2 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h2><p>To be continue</p><h2 id="演示程序"><a href="#演示程序" class="headerlink" title="演示程序"></a>演示程序</h2><p>搬运自知乎id 何方<br>原地址<a href="https://zhuanlan.zhihu.com/p/180508343">https://zhuanlan.zhihu.com/p/180508343</a><br>侵权删，等博主学习了一些前端后，会自己重写</p><body>    <style>        .buttonContainer button {            border-radius: 5px;            border: none;            background-color: #66ccff31;            height: 30px;            width: 54px;            box-shadow: 2px 2px 2px 2px rgba(0 0 0 / 0.4);            margin-right: 10px;        }    </style>    <canvas id="canvas" style="border: 1px solid" width="500%" height="500%"></canvas>    <div class="buttonContainer">        <div>            <button id="draw">画图</button>            <button id="reDraw">重画</button>            <button id="clear">清空</button>            <button id="radom">随机</button>        </div>    </div>    <script>        const cv = document.getElementById("canvas");        const draw = document.getElementById("draw");        const clear = document.getElementById("clear");        const reDraw = document.getElementById("reDraw");        if (/Mobi|Android|iPhone/i.test(navigator.userAgent)) {            cv.height = 290;            cv.width = 290;        }        let points = [];        const ctx = cv.getContext("2d");        let offset = 0;        let timer;        function calcMiddlePoint(p1, p2) {            return { x: (p2.x - p1.x) * offset + p1.x, y: (p2.y - p1.y) * offset + p1.y };        }        let finalPoints = [];        function drawLine() {            let last = {}            ctx.strokeStyle = "red";            ctx.lineWidth = 3;            ctx.beginPath();            finalPoints.forEach(({ x, y }, index) => {                if (index === 0) {                    ctx.moveTo(x, y)                } else {                    ctx.lineTo(x, y)                }            });            ctx.stroke();        }        function drawLines(ps, color) {            if (ps.length < 2) {                const { x, y } = ps[0];                finalPoints.push({ x, y });                drawLine();                return;            }            ctx.lineWidth = 1;            ctx.strokeStyle = color || "green";            ctx.beginPath();            for (let i = 0; i < ps.length; i++) {                const { x, y } = ps[i];                if (i === 0) {                    ctx.moveTo(x, y);                } else {                    ctx.lineTo(x, y);                }            }            ctx.stroke();            const pps = [];            for (let i = 0; i < ps.length - 1; i++) {                pps.push(calcMiddlePoint(ps[i], ps[i + 1], .5));            }            drawLines(pps)        }        function doDraw() {            if (points.length < 2) {                alert(`无法画图，请至少指定2个点`);                return;            }            timer && clearInterval(timer);            drawLines(points, 'blue');            timer = setInterval(() => {                offset += 0.001;                window.requestAnimationFrame(() => {                    ctx.clearRect(0, 0, cv.width, cv.height);                    drawLines(points, 'blue');                });                if (offset >= 1) {                    clearInterval(timer);                }            }, 1);        }        reDraw.addEventListener("click", function () {            finalPoints = [];            offset = 0;            ctx.clearRect(0, 0, cv.width, cv.height);            doDraw();        });        draw.addEventListener("click", doDraw);        clear.addEventListener("click", () => {            points = [];            finalPoints = [];            offset = 0;            ctx.clearRect(0, 0, cv.width, cv.height);        });        cv.addEventListener("click", function (e) {            points.push({ x: e.offsetX, y: e.offsetY });            console.log("point:", { x: e.offsetX, y: e.offsetY });            ctx.fillStyle = "black";            ctx.beginPath();            ctx.arc(e.offsetX, e.offsetY, 2, 0, Math.PI * 2);            ctx.fill();        });        radom.addEventListener("click", () => {            points = [];            finalPoints = [];            offset = 0;            ctx.clearRect(0, 0, cv.width, cv.height);            for (let i = 0; i < 10; i++) {                points.push({ x: Math.random() * cv.width, y: Math.random() * cv.height })            }            doDraw();        });    </script></body>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/d87f7e0c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>不透明物体与半透明物体边缘算法与Unity Shader Graph 实现</title>
      <link>https://rdququ.top/posts/223f372/</link>
      <guid>https://rdququ.top/posts/223f372/</guid>
      <pubDate>Tue, 12 Dec 2023 11:25:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><span id="more"></span><h3 id="归一化空间坐标-NDK-Normalized-Device-Coordinates"><a href="#归一化空间坐标-NDK-Normalized-Device-Coordinates" class="headerlink" title="归一化空间坐标 NDK(Normalized Device Coordinates)"></a>归一化空间坐标 NDK(Normalized Device Coordinates)</h3><p>在齐次裁剪空间的基础上进行透视除法或称齐次除法, 得到的坐标叫做NDC空间坐标。</p><p><a href="https://zhuanlan.zhihu.com/p/102758967">一篇文章彻底弄懂齐次裁剪 - 知乎 (zhihu.com)</a></p><h4 id="透视除法-齐次除法-perspective-division-homogeneous-division"><a href="#透视除法-齐次除法-perspective-division-homogeneous-division" class="headerlink" title="透视除法-齐次除法(perspective division-homogeneous division)"></a>透视除法-齐次除法(<strong>perspective division</strong>-<strong>homogeneous division)</strong></h4><p>就是将齐次裁剪空间坐标positionCS的X,Y,Z分量都除以W分量。</p><p><a href="https://www.jianshu.com/p/7e701d7bfd79">写给大家看的“透视除法” —— 齐次坐标和投影 - 简书 (jianshu.com)</a></p><p><img src="https://pic4.zhimg.com/80/v2-4baca450c51c7f0eea873c42eeda0eef_720w.webp" alt=""></p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><h2 id="Unity-Shader-Graph-实现"><a href="#Unity-Shader-Graph-实现" class="headerlink" title="Unity Shader Graph 实现"></a>Unity Shader Graph 实现</h2><h3 id="SceneDepth"><a href="#SceneDepth" class="headerlink" title="SceneDepth"></a>SceneDepth</h3><blockquote><p>Provides access to the current  <strong>Camera</strong> ‘s depth buffer using input  <strong>UV</strong> , which is expected to be normalized screen coordinates.<br>Note: Depth buffer access requires depth buffer to be enabled on the active  <strong>Render Pipeline</strong> . This process is different per  <strong>Render Pipeline</strong> . It is recommended you read the documentation of your active <strong>Render Pipeline</strong> for information on enabling the depth buffer. If the depth buffer is unavailable this <a href="https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Packages/com.unity.shadergraph%406.9/manual/Node.html">Node</a> will return mid grey.</p></blockquote><p>也就是说SceneDepth Node是对深度纹理进行获取的节点，只不过获取的方法不同，而深度纹理中存储的是NDC坐标的深度值。</p><p><img src="https://pic4.zhimg.com/80/v2-199f0cb63bdba7f81de4c826056dcbff_720w.webp" alt="img"></p><ul><li>Linear01获取的是线性的范围为[0,1]的深度值。<blockquote><p>想要把Raw Depth转换成线性 ，并且从近平面到远平面为0-1的深度，就需要Linear 01 Depth，这时0.5深度就是视锥体一半的位置。</p></blockquote></li><li>Raw也就是深度纹理中存储的非线性，范围为[0,1]的值。<blockquote><p>表示深度缓冲的原始数据，普通的深度缓冲使用32位的浮点数表示深度，相机近平面的深度为0，远平面的深度为1。而Unity 使用了Reversed Z，这就使得近平面深度为1，而远平面深度为0，另外，如果相机的投影矩阵不是正交矩阵，那么深度缓冲中的深度就不是线性的，举个例子就是深度0.5代表的地方并不是视锥体一半的位置。</p></blockquote></li><li>Eye获取的是视角空间下的线性深度值，范围为[near, far]。<blockquote><p>Linear Eye Depth中深度为1表示沿着摄像机Z轴，距离为1个单位的地方，2就是距离两个单位的地方，以此类推。</p></blockquote></li></ul><h3 id="ScreenPosition"><a href="#ScreenPosition" class="headerlink" title="ScreenPosition"></a>ScreenPosition</h3><blockquote><p>Provides access to the mesh vertex or fragment’s <strong>Screen Position</strong> .</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-439252aa4b98dac54ced99bf1460a58e_720w.webp" alt="img"></p><ul><li>ScreenPosition在Default选项下会进行齐次除法运算（即除以w分量），这里的w范围为[0,1],也就是NDC下的w分量。经过透视除法的，左下角是（0，0）右上角是（1，1）的屏幕空间</li><li>在Raw选项下，不会进行齐次除法运算,这里的w范围是[Near, Far],是Clip Space中的w分量。未经过透视除法的，左下角是（0，0）右上角是（1，1）的屏幕空间</li><li>Center: 经过透视除法的，左下角是（-1，-1）右上角是（1，1）的屏幕空间</li><li>Tiled: 经过透视除法的，分成上下均等的四块组成，每块左下角是（0，0）右上角是（1，1）的屏幕空间</li></ul><p>在这里ScreenPosition的w分量的含义也就是ClipSpace下的w分量，范围是[Near, Far],而当xy除以w分量后，越远的顶点也就会除以越大的w分量，就会产生透视现象。</p><h3 id="存疑之处与我的观点-证明"><a href="#存疑之处与我的观点-证明" class="headerlink" title="存疑之处与我的观点/证明"></a>存疑之处与我的观点/证明</h3><p>博主<a href="https://www.zhihu.com/people/lute-li">Lute Li </a>，认为</p><blockquote><p>（Scene Depth是除开透明模型之外的深度，Screen Position是所有模型的深度，相减就是边缘）</p></blockquote><p>出处<a href="https://zhuanlan.zhihu.com/p/109547098">从头学ShaderGraph 5-护盾材质 - 知乎 (zhihu.com)</a></p><p><img src="https://pic2.zhimg.com/80/v2-fea83d5ed062c6bfe5dc8221e2d5d999_720w.webp" alt=""></p><p><strong>(Vertex Shader) =&gt; Clip Space =&gt; (透视除法) =&gt; NDC =&gt; (视口变换) =&gt; Window Space =&gt; (Fragment Shader)</strong></p><p>现象很好观察，但是不知道原理，翻遍了官方文档和网上的教程也没能得到一个足够有说服力的解释，现在可以知道 SceneDepth 的 Eye 获取的是视角空间下的线性深度值，范围为[near, far]，ScreenPosition 的 w 分量是是 Clip Space 中未经过透视除法的值，范围也是[near, far]。我们知道物体自Eye/View/Camera Space(这玩意名字真多)到Cliping Space 要经过一次透视变换，或者说透视除法，所以实际上，Screen Graph 的 w 分量也许就是 Eye Space 下到相机的距离(不是深度，所以也存储了透明物体的距离)</p><p><img src="image/不透明物体与半透明物体边缘算法与Unity-Shader-Graph-实现/1702390346535.png" alt="1702390346535"></p><p>上图的实验一定程度上看可以证明上文的观点。</p><p>有趣的是，当我们把 Surface Type 修改为Transparent, 场景中的透明与不透明物体的交界处出现了一道淡淡的白线</p><p><img src="image/不透明物体与半透明物体边缘算法与Unity-Shader-Graph-实现/1702390608834.png" alt="1702390608834"></p><p>我们将 Comparison 节点的输入值 B 调大，交界处出现了明显的白线</p><p><img src="image/不透明物体与半透明物体边缘算法与Unity-Shader-Graph-实现/1702390681409.png" alt="1702390681409"></p><p><img src="image/不透明物体与半透明物体边缘算法与Unity-Shader-Graph-实现/1702390730401.png" alt="1702390730401"></p><p>我们知道，初始输出的两个节点的取值范围都是[n,f]，所以当我们把对比节点的输入值B调到1的时候，边界就很明显了。</p><p>现在，结果已经呼之欲出了，Scene Depth 节点的 Eye 输出的是深度值，我们知道，透明物体默认不会写入深度缓冲，Screen Position 输出的是简单的距离，故而相减可以得到边界。</p><h2 id="参考资料与引用"><a href="#参考资料与引用" class="headerlink" title="参考资料与引用"></a>参考资料与引用</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/535898515">unity urp 20 SceneDepth和ScreenPosition.w - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/347698766">Shader Graph中的Scene Depth和Screen Position - 知乎 (zhihu.com)</a></li><li><a href="https://www.bilibili.com/video/BV1sa411C7Xd/">2022版Unity Shader Graph教程04 水面 (上) 超简单ShaderGraph入门_哔哩哔哩_bilibili</a></li><li><a href="https://zhuanlan.zhihu.com/p/102758967">一篇文章彻底弄懂齐次裁剪 - 知乎 (zhihu.com)</a></li><li><a href="https://www.jianshu.com/p/7e701d7bfd79">写给大家看的“透视除法” —— 齐次坐标和投影 - 简书 (jianshu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/493733502">Unity Shader Graph 中深度纹理（Depth Texture）和屏幕空间坐标（Screen Position） - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/109547098">从头学ShaderGraph 5-护盾材质 - 知乎 (zhihu.com)</a></li><li><a href="https://carmencincotti.com/2022-05-02/homogeneous-coordinates-clip-space-ndc/#homogeneous-coordinates">Homogeneous Coordinates, Clip Space, and NDC | WebGPU | Carmen&#39;s Graphics Blog —- 齐次坐标、裁剪空间和 NDC |网络GPU |Carmen 的图形博客 (carmencincotti.com)</a></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/223f372/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unity_GC_浅谈</title>
      <link>https://rdququ.top/posts/e44777a7/</link>
      <guid>https://rdququ.top/posts/e44777a7/</guid>
      <pubDate>Sun, 10 Dec 2023 05:50:22 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Unity-底层的内存分配&quot;&gt;&lt;a href=&quot;#Unity-底层的内存分配&quot; class=&quot;headerlink&quot; title=&quot;Unity 底层的内存分配&quot;&gt;&lt;/a&gt;Unity 底层的内存分配&lt;/h2&gt;&lt;h3 id=&quot;托管内存&quot;&gt;&lt;a href=&quot;#托管内存&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Unity-底层的内存分配"><a href="#Unity-底层的内存分配" class="headerlink" title="Unity 底层的内存分配"></a>Unity 底层的内存分配</h2><h3 id="托管内存"><a href="#托管内存" class="headerlink" title="托管内存"></a>托管内存</h3><p>Mono 和 IL2CPP 的脚本虚拟机(virtual machines =&gt; VMs)实现了托管内存系统(脚本内存系统)。这些VMs提供了数种受控内存环境。</p><h4 id="Managed-Heap-『托管堆』"><a href="#Managed-Heap-『托管堆』" class="headerlink" title="Managed Heap 『托管堆』"></a>Managed Heap 『托管堆』</h4><p>GC 自动控制的内存区域。</p><h4 id="Scripting-Stack-『脚本栈』"><a href="#Scripting-Stack-『脚本栈』" class="headerlink" title="Scripting Stack 『脚本栈』"></a>Scripting Stack 『脚本栈』</h4><p>在应用程序进入和退出任何代码范围时构建和展开</p><h4 id="Native-VM-Memory-『本地虚拟机内存』"><a href="#Native-VM-Memory-『本地虚拟机内存』" class="headerlink" title="Native VM Memory 『本地虚拟机内存』"></a>Native VM Memory 『本地虚拟机内存』</h4><p>包含与 Unity 脚本层相关的内存，大多数情况下不需要主动管理。</p><h3 id="C-非托管内存"><a href="#C-非托管内存" class="headerlink" title="C# 非托管内存"></a>C# 非托管内存</h3><p>允许编写 C# 代码来访问本机内存以微调内存分配。<br>可以使用 Unity 核心 API 中的 Unity.Collections 命名空间（包括 NativeArray）和 Unity Collections 包中的数据结构来访问 C# 非托管内存。如果使用 Unity 的 C# Job 系统或 Burst，则必须使用 C# 非托管内存。</p><h3 id="Native-Memory-『本机内存』"><a href="#Native-Memory-『本机内存』" class="headerlink" title="Native Memory 『本机内存』"></a>Native Memory 『本机内存』</h3><h2 id="Unity-应用的-GC-算法"><a href="#Unity-应用的-GC-算法" class="headerlink" title="Unity 应用的 GC 算法"></a>Unity 应用的 GC 算法</h2><h3 id="BoehmGC"><a href="#BoehmGC" class="headerlink" title="BoehmGC"></a>BoehmGC</h3><h4 id="BoehmGC-算法原理"><a href="#BoehmGC-算法原理" class="headerlink" title="BoehmGC 算法原理"></a>BoehmGC 算法原理</h4><h4 id="BoehmGC-的内存管理"><a href="#BoehmGC-的内存管理" class="headerlink" title="BoehmGC 的内存管理"></a>BoehmGC 的内存管理</h4><h4 id="BoehmGC-算法实现"><a href="#BoehmGC-算法实现" class="headerlink" title="BoehmGC 算法实现"></a>BoehmGC 算法实现</h4><h4 id="MONO-与-IL2CPP-中的-BoehmGC"><a href="#MONO-与-IL2CPP-中的-BoehmGC" class="headerlink" title="MONO 与 IL2CPP 中的 BoehmGC"></a>MONO 与 IL2CPP 中的 BoehmGC</h4><h3 id="渐进式-GC"><a href="#渐进式-GC" class="headerlink" title="渐进式 GC"></a>渐进式 GC</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/623849906">Unity 垃圾回收GC的原理？</a></li><li><a href="https://zhuanlan.zhihu.com/p/265217138">Unity GC 学习总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/41023320">解读MONO内存管理和回收！</a></li><li><a href="https://zhuanlan.zhihu.com/p/41398507">解读MONO内存管理：BOEHM GC原理及总结</a></li><li><a href="https://juejin.cn/post/6966954993869914119">Unity3D托管堆BoehmGC算法学习-内存分配篇</a></li><li><a href="https://juejin.cn/post/6968400262629163038">Unity3D托管堆BoehmGC算法学习-垃圾回收篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/381859536?">【笔记】Unity内存分配和回收的底层原理</a></li><li><a href="https://docs.unity3d.com/Manual/performance-memory-overview.html">Memory in Unity Unity</a></li><li><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science">Garbage collection (computer science)</a>)</li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/e44777a7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UnityshaderGraph学习2021版</title>
      <link>https://rdququ.top/posts/1fbb4100/</link>
      <guid>https://rdququ.top/posts/1fbb4100/</guid>
      <pubDate>Fri, 08 Dec 2023 05:02:30 GMT</pubDate>
      
      <description>&lt;p&gt;学习笔记&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>学习笔记<br><span id="more"></span></p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>选择 URP 模板创建不需要配置环境<br>普通 3D 项目，包管理器安装 Universal RP, visual effect graph，设置中正常配置 Graphics</p><h2 id="光照模型"><a href="#光照模型" class="headerlink" title="光照模型"></a>光照模型</h2><p>Create =&gt; ShaderGraph =&gt; URP =&gt; Lit Shader Graph</p><p>输入属性节点：<br><img src="输入属性节点.png" alt="输入属性节点"></p><p>属性设置：<br><img src="属性设置.png" alt="属性设置"></p><ul><li>Precision [精度] [single/half] half 性能更好</li></ul><p>在 Universal 中</p><ul><li><p>Material [材质]</p><ul><li>[sprite Custom] 自定义精灵</li><li>[sprite Lit] 精灵光照</li><li>[sprite Unlit] 精灵非光照</li><li>[Decal] 贴花</li><li>[Lit] 光照</li><li>[Unlit] 非光照</li></ul></li><li><p>Allow Material Override [允许材质覆盖] [勾选] 可以通过材质检查器修改某些图形属性。</p></li><li>workflow [工作流] [Specular/Metallic] [勾选] 镜面高光/金属工作流</li><li>Surface Type [表面类型] [Opaque/Transparent] [半透明/不透明]</li><li>Render Face [渲染面] [Front/Back/Double] [正面/背面/双面]</li><li>Depth Write [深度写入] [Auto/Force Enabled/Force Disabled] [自动/强制开启/强制关闭]</li><li>Depth Test [深度测试] [Never/Less/Equal/LessEqual/Greater/NotEqual/GreaterEqual/Always] [从不/小于/等于/小于等于/大于/不等于/大于等于/总是]</li><li>Alpha Clipping [Alpha裁剪] [勾选]</li><li>Receive Shadows [接收阴影] [勾选]</li><li>Fragment Normal Space [片段法线空间] [Tangent/World/View] [切线/世界/视图]</li><li>Clear Coat [清漆] [勾选]</li><li>Custom Editor GUI [自定义编辑器GUI]</li><li>Supports VFXGRAph [支持VFXGRAph] [勾选]</li></ul><p>顶点着色器:<br><img src="顶点着色器.png" alt="顶点着色器"></p><p>片段着色器:<br><img src="片元着色器.png" alt="片元着色器"></p><p>乘法节点 Multiply: 颜色叠加</p><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><h4 id="Base-Color"><a href="#Base-Color" class="headerlink" title="Base Color"></a>Base Color</h4><p>主贴图，展现了模型的基本纹理<br>可以新建一个 Texture2D 属性，然后将其作为输入<br><img src="UnityShaderGraphBaseColor.png" alt="UnityShaderGraphBaseColor"></p><p>MainTexture 保持默认</p><h4 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h4><p><img src="UnityShaderGraphNormal.png" alt="UnityShaderGraphNormal"></p><p>注意 Sample Texture 2D 的 Type 要设置为 Normal<br>NormalTexture 的 Mode 选择 Normal Map</p><h4 id="Metallic"><a href="#Metallic" class="headerlink" title="Metallic"></a>Metallic</h4><p><img src="UnityShaderGraphMetallic.png" alt="UnityShaderGraphMetallic"><br>保持默认</p><h4 id="Smoothness"><a href="#Smoothness" class="headerlink" title="Smoothness"></a>Smoothness</h4><p><img src="UnityShaderGraphSmoothness.png" alt="UnityShaderGraphSmoothness"></p><p>输出金属光泽度的 Alpha 通道与 Smoothness 通过 Multiply 乘法节点相乘, 得到输出值</p><h4 id="Emission"><a href="#Emission" class="headerlink" title="Emission"></a>Emission</h4><p><img src="UnityShaderGraphEmission.png" alt="UnityShaderGraphEmission"><br>自发光贴图与类型为 Boolean Keywork 的 EmissiveTexture 相乘来控制是否自发光，得到其输出值与 EmissionColor 相乘得到最终的输出值</p><h4 id="AO"><a href="#AO" class="headerlink" title="AO"></a>AO</h4><p><img src="UnityShaderGraphAO.png" alt="UnityShaderGraphAO"><br>保持默认</p><h3 id="Sub-Graph"><a href="#Sub-Graph" class="headerlink" title="Sub Graph"></a>Sub Graph</h3><p>框选中对应节点右击 Convert to =&gt; Sub-graph</p><h3 id="轮廓光-边缘光"><a href="#轮廓光-边缘光" class="headerlink" title="轮廓光/边缘光"></a>轮廓光/边缘光</h3><p>Fresnel Effect</p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/1fbb4100/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AABB_Plane_intersection原理详解及Unity实现</title>
      <link>https://rdququ.top/posts/2c23d1d4/</link>
      <guid>https://rdququ.top/posts/2c23d1d4/</guid>
      <pubDate>Tue, 05 Dec 2023 13:39:39 GMT</pubDate>
      
      <description>&lt;p&gt;起因是我在学习 runtime 的 mesh 切割算法，需要判断目标 mesh 是否和切面相交（不相交的话我就不需要去处理了）&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>起因是我在学习 runtime 的 mesh 切割算法，需要判断目标 mesh 是否和切面相交（不相交的话我就不需要去处理了）<br><span id="more"></span></p><h2 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h2><p>Unity 的 mesh 和 collider 都使用 AABB 包围盒</p><h3 id="什么是-AABB-包围盒？"><a href="#什么是-AABB-包围盒？" class="headerlink" title="什么是 AABB 包围盒？"></a>什么是 AABB 包围盒？</h3><p>AABB ==&gt; Axis Aligned Bounding Box (轴对齐边界框)</p><p>AABB（轴对齐边界框）是一个 3D 框。它的宽度/高度/深度不必相等，但宽度始终与 X 轴对齐，高度与 Y 轴对齐，深度与 Z 轴对齐。也就是说，这个盒子是不能旋转的。</p><h3 id="如何表示-AABB？"><a href="#如何表示-AABB？" class="headerlink" title="如何表示 AABB？"></a>如何表示 AABB？</h3><p>有两种常见的方法，存储最左边和最右边的角，或者存储中心点和盒子在每侧延伸多远的向量。</p><p>第一种：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> AABB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 min;</span><br><span class="line">    <span class="keyword">public</span> Vector3 max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> AABB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 center;</span><br><span class="line">    <span class="keyword">public</span> Vector3 extents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="AABB表示法.png" alt="AABB表示法"></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>为了测试 AABB 和平面是否相交，我们首先必须将 AABB 的每个顶点投影到平面的法线上。这使我们 AABB 的所有顶点都在一条线上。</p><p>然后，我们检查离平面最远的顶点。如果与顶点对角线相对的顶点位于平面的另一侧，则我们有一个交点。</p><p>通用的 C# 代码如下，无论你的 AABB 是如何表示的(max/min 或 center/extents)，只需要稍作修改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test if AABB b intersects plane p</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">TestAABBPlane</span>(<span class="params">AABB b, Plane p</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Convert AABB to center-extents representation</span></span><br><span class="line">    Point c = (b.max + b.min) * <span class="number">0.5f</span>; <span class="comment">// Compute AABB center</span></span><br><span class="line">    Point e = b.max - c; <span class="comment">// Compute positive extents</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the projection interval radius of b onto L(t) = b.c + t * p.n</span></span><br><span class="line">    <span class="built_in">float</span> r = e[<span class="number">0</span>]*Abs(p.n[<span class="number">0</span>]) + e[<span class="number">1</span>]*Abs(p.n[<span class="number">1</span>]) + e[<span class="number">2</span>]*Abs(p.n[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute distance of box center from plane</span></span><br><span class="line">    <span class="built_in">float</span> s = Dot(p.n, c) - p.d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Intersection occurs when distance s falls within [-r,+r] interval</span></span><br><span class="line">    <span class="keyword">return</span> Abs(s) &lt;= r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让我们来解析这段代码"><a href="#让我们来解析这段代码" class="headerlink" title="让我们来解析这段代码"></a>让我们来解析这段代码</h3><ol><li>函数传入了目标 Mesh 的 AABB，和目标平面</li><li>进入后的两行假设你的 AABB 是用 max/min 表示的，如果你可以轻松调取 AABB 的 center 和 extents，那么这两行是可以被跳过的</li><li>下一段代码计算了 AABB 的投影半径，这个半径是 AABB 投影到平面法线上的最大距离。</li><li>其取 AABB 的范围和平面法线的绝对值的点积，用于确保计算出的长度是正值，因为两个向量中的元素都是正值或零。<script type="math/tex">n' = (\lvert n_{x} \rvert,\lvert n_{y} \rvert,\lvert n_{z} \rvert) \\ \vec{e} \cdot \vec{n'} = \lvert\vec{e} \rvert \lvert\vec{n'} \rvert \cos \theta \\ \lvert\vec{n'} \rvert =1 \\\vec{e} \cdot \vec{n'} = \lvert\vec{e} \rvert  \cos \theta</script></li><li>下面计算了 AABB 中心点到平面的距离，计为 s</li><li>最后的返回值即为 AABB 自身在平面法线上的距离和其中心到平面距离长短的判断</li></ol><h3 id="Unity-实现"><a href="#Unity-实现" class="headerlink" title="Unity 实现"></a>Unity 实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">BoundPlaneIntersect</span>(<span class="params">Mesh mesh, <span class="keyword">ref</span> Plane plane</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Compute projection interval radius</span></span><br><span class="line">        <span class="built_in">float</span> r = mesh.bounds.extents.x * Mathf.Abs(plane.normal.x) +</span><br><span class="line">            mesh.bounds.extents.y * Mathf.Abs(plane.normal.y) +</span><br><span class="line">            mesh.bounds.extents.z * Mathf.Abs(plane.normal.z);<span class="comment">//做点乘，得出mesh包围盒的范围在平面法线上的投影，包围盒在平面法线方向上的最大距离</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute distance of box center from plane</span></span><br><span class="line">        <span class="built_in">float</span> s = Vector3.Dot(plane.normal, mesh.bounds.center) - (-plane.distance);<span class="comment">//前面点乘得mesh中心在平面法线上的投影，这是为了确保计算出的距离和后面的平面距离在同一方向</span></span><br><span class="line">        <span class="comment">//如果法线面朝内，后- (-plane.distance)为正，前mesh中心在与相对原点相交且与平面平行的平面‘靠近平面的一侧，Vector3.Dot(plane.normal, mesh.bounds.center)为负，符合逻辑</span></span><br><span class="line">        <span class="comment">//因为mesh中心和平面在同一侧，距离为相见</span></span><br><span class="line">        <span class="comment">//若mesh中心在与 相对原点相交且与平面平行的平面‘ 远离平面的一侧，就是说mesh中心与平面中间相隔了一个原点，那么前后就都是同号，符合逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Intersection occurs when distance s falls within [-r,+r] interval</span></span><br><span class="line">        <span class="keyword">return</span> Mathf.Abs(s) &lt;= r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://gdbooks.gitbooks.io/3dcollisions/content/Chapter1/aabb.html">AABB - Axis Aligned Bounding Box</a></li><li><a href="https://docs.unity.cn/cn/2021.3/ScriptReference/Bounds.html">Bounds-Unity_Documentation</a></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/2c23d1d4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Unity底层如何处理C#</title>
      <link>https://rdququ.top/posts/c896f832/</link>
      <guid>https://rdququ.top/posts/c896f832/</guid>
      <pubDate>Mon, 04 Dec 2023 14:20:41 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;关键词&quot;&gt;&lt;a href=&quot;#关键词&quot; class=&quot;headerlink&quot; title=&quot;关键词&quot;&gt;&lt;/a&gt;关键词&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.NET mono 虚拟机&lt;/li&gt;
&lt;li&gt;IL2CPP</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>.NET mono 虚拟机</li><li>IL2CPP<span id="more"></span><h3 id="为什么选择-mono"><a href="#为什么选择-mono" class="headerlink" title="为什么选择 mono"></a>为什么选择 mono</h3></li></ul><p>Mono 是一个开源的 .NET 框架的实现，它可以在 Linux、Mac、Windows 等平台上运行，而且可以在这些平台上编译出可执行文件。</p><p>开源、跨平台、Mono的开发工具( MonoDevelop 现在已被弃用)</p><h3 id="为什么推出-IL2CPP"><a href="#为什么推出-IL2CPP" class="headerlink" title="为什么推出 IL2CPP"></a>为什么推出 IL2CPP</h3><ul><li>Mono 没有合法身份， 微软收购之后的版权问题</li><li>Mono 虚拟机 解释执行 .NET 字节码，效率低</li><li>有些平台不允许内置 .net 虚拟机 (eg. iOS)</li><li>如果有新的平台出现，Mono 难以为其提供支持(跨不了平台咯)，移植很麻烦(eg. WebGL)</li></ul><p>IL: Intermediate Language .NET框架中间语言, .NET字节码<br>IL2CPP: IL to C++，将IL转换为C++代码 —&gt; 编译为可执行文件 —&gt; native platform</p><p>Unity:</p><ol><li>Unity C/C++ 以及 native 的开发 —&gt; 跨平台的 runtime (xcode, android studio)</li><li>Unity 开发者脚本语言(C#) —&gt; .NET字节码 —&gt; .dll —&gt; IL code —&gt; IL2CPP —&gt; C++</li><li>C# GC —&gt; c++ 为其提供支持<br>IL2CPP vm:支持 C# .NET 独有的特性，如反射，泛型，委托，lambda表达式等</li></ol><h3 id="IL2CPP-做了什么？有什么优势？"><a href="#IL2CPP-做了什么？有什么优势？" class="headerlink" title="IL2CPP 做了什么？有什么优势？"></a>IL2CPP 做了什么？有什么优势？</h3><ol><li>跨平台可以执行问题 —&gt; Unity —&gt;&gt; 移植 IL2CPP —&gt; .NET 版本问题</li><li>性能获得提升 —&gt; 基于 IL2CPP 发布(而不是 Mono)</li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/c896f832/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线性代数在游戏开发中的基础和简单应用</title>
      <link>https://rdququ.top/posts/90745bbc/</link>
      <guid>https://rdququ.top/posts/90745bbc/</guid>
      <pubDate>Sat, 18 Nov 2023 06:08:32 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;坐标系&quot;&gt;&lt;a href=&quot;#坐标系&quot; class=&quot;headerlink&quot; title=&quot;坐标系&quot;&gt;&lt;/a&gt;坐标系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;笛卡尔坐标系&lt;/li&gt;
&lt;li&gt;圆柱坐标系&lt;br&gt;垂直“高度与” $h$ 、从垂直轴发出的辐射轴 $r$ 、偏航角(yaw) $&#92;theta$&lt;/li&gt;
&lt;li&gt;球坐标系&lt;br&gt;俯仰角(pitch) $&#92;phi$ 、偏航角(yaw) $&#92;theta$ 、半径长度 $r$&lt;br&gt;eg. 经纬线</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><ul><li>笛卡尔坐标系</li><li>圆柱坐标系<br>垂直“高度与” $h$ 、从垂直轴发出的辐射轴 $r$ 、偏航角(yaw) $\theta$</li><li>球坐标系<br>俯仰角(pitch) $\phi$ 、偏航角(yaw) $\theta$ 、半径长度 $r$<br>eg. 经纬线<span id="more"></span><h3 id="笛卡尔坐标系的左手系和右手系"><a href="#笛卡尔坐标系的左手系和右手系" class="headerlink" title="笛卡尔坐标系的左手系和右手系"></a>笛卡尔坐标系的左手系和右手系</h3></li></ul><p>手握拳，伸出大拇指，四指从 $x$ 轴指向 $y$ 轴，大拇指指向 $z$ 轴，这就是右手系。</p><p>反之为左手系。</p><h2 id="向量-vector"><a href="#向量-vector" class="headerlink" title="向量(vector)"></a>向量(vector)</h2><p>在 n 维空间中包含 modulus (模)和 direction (方向)的量。</p><h3 id="模长"><a href="#模长" class="headerlink" title="模长"></a>模长</h3><p>向量的模长是向量的长度，用 $||\vec{v}||$ 表示。</p><p>$<br>||\vec{v}|| = \sqrt{v_1^2 + v_2^2 + \cdots + v_n^2}<br>$</p><h4 id="magic-number-卡马克快速平方根"><a href="#magic-number-卡马克快速平方根" class="headerlink" title="magic number (卡马克快速平方根)"></a>magic number (卡马克快速平方根)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">Q_rsqrt</span><span class="params">( <span class="type">float</span> number )</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">long</span> i;</span><br><span class="line">  <span class="type">float</span> x2, y;</span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> threehalfs = <span class="number">1.5F</span>;</span><br><span class="line"></span><br><span class="line">  x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">  y = number;</span><br><span class="line">  i = * ( <span class="type">long</span> * ) &amp;y;                       <span class="comment">// evil floating point bit level hacking</span></span><br><span class="line">  i = <span class="number">0x5f3759df</span> - (i &gt;&gt; <span class="number">1</span>);                 <span class="comment">// what the fuck?</span></span><br><span class="line">  y = * ( <span class="type">float</span> * ) &amp;i;</span><br><span class="line">  y = y * (threehalfs - ( x2 * y * y ) );    <span class="comment">// 1st iteration</span></span><br><span class="line">  y = y * (threehalfs - ( x2 * y * y ) );    <span class="comment">// 2nd iteration, this can be removed</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV18j411i7bp">科普视频</a></p><p><a href="http://www.beyond3d.com/content/articles/8/">真正的作者</a></p><h3 id="归一化和单位向量"><a href="#归一化和单位向量" class="headerlink" title="归一化和单位向量"></a>归一化和单位向量</h3><h3 id="三角形法则（加减法）"><a href="#三角形法则（加减法）" class="headerlink" title="三角形法则（加减法）"></a>三角形法则（加减法）</h3><h3 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h3><ul><li>投影的计算</li><li>是否共线</li></ul><h3 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h3><ul><li>右手法则的原理</li><li>点在三角形的内/外？</li></ul><h2 id="线性插值-Lerp"><a href="#线性插值-Lerp" class="headerlink" title="线性插值 (Lerp)"></a>线性插值 (Lerp)</h2><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="用矩阵表示点和向量"><a href="#用矩阵表示点和向量" class="headerlink" title="用矩阵表示点和向量"></a>用矩阵表示点和向量</h3><h3 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h3><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><h3 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h3><h3 id="逆矩阵于逆矩阵的求法"><a href="#逆矩阵于逆矩阵的求法" class="headerlink" title="逆矩阵于逆矩阵的求法"></a>逆矩阵于逆矩阵的求法</h3><p><a href="https://blog.csdn.net/daduzimama/article/details/120509856">逆矩阵的求法</a></p><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><h3 id="正交矩阵"><a href="#正交矩阵" class="headerlink" title="正交矩阵"></a>正交矩阵</h3><h3 id="齐次坐标-来不及就不讲"><a href="#齐次坐标-来不及就不讲" class="headerlink" title="齐次坐标 (来不及就不讲)"></a><em>齐次坐标</em> (来不及就不讲)</h3>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/90745bbc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>引擎开发实战学习笔记</title>
      <link>https://rdququ.top/posts/b15b4e49/</link>
      <guid>https://rdququ.top/posts/b15b4e49/</guid>
      <pubDate>Tue, 14 Nov 2023 07:26:04 GMT</pubDate>
      
      <description>&lt;p&gt;记录&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>记录<br><span id="more"></span></p><ol><li>EntryPoint</li><li>Logging</li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/b15b4e49/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Component-Based &amp; Component-Oriented Programming</title>
      <link>https://rdququ.top/posts/c63a25c3/</link>
      <guid>https://rdququ.top/posts/c63a25c3/</guid>
      <pubDate>Sat, 11 Nov 2023 04:09:40 GMT</pubDate>
      
      <description>&lt;p&gt;一点关于 Component 的思考&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>一点关于 Component 的思考</p><span id="more"></span><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="面向对象编程-Object-Oriented-Programming"><a href="#面向对象编程-Object-Oriented-Programming" class="headerlink" title="面向对象编程 Object Oriented Programming"></a>面向对象编程 Object Oriented Programming</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h5><p>让派生类可以使用基类的接口和实现，而不需要重新编写相同的代码。目的是代码的复用。<br>但是实现继承会导致派生类和基类之间的强耦合，当基类的实现发生变化时，派生类也需要跟着变化。</p><h5 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h5><p>接口继承是指派生类只继承基类的接口，而不继承基类的实现。目的是让更高层的调用者不需要关注具体细节，可以一视同仁的去处理他见到的所以对象。我们也会把这种思想叫做“归一化”，典型的就是<code>toString()</code>方法。</p><p>反过来也一样，高层的调用者不需要对底层的实现指手画脚，最好连告知都不需要告知他们。我们把这种策略叫做“封装”</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>代码复用性相对差</li><li>实际开发中，对象缺少明显的父子继承关系</li><li>实现继承的强耦合性</li></ul><p>游戏世界的对象是绝对复杂的，再父子继承的过程中，我们几乎没办法找到一个父类或者祖父类让所有子类都心甘情愿的继承他。</p><p>下面可以举一个小栗子</p><p>我们有一个 <code>水陆空三栖核能魔法混动运兵器</code>，那么这个类该继承自谁呢？</p><p>或许你能搞定他的父类，但是你能搞定他的祖父类吗？战车？船只？还是飞机？</p><p>或许你会觉得这个例子太过刁钻了，但事实上，哪怕是现实世界的对象，纯粹的 OO 也会心有余而力不足。比如，弓骑兵到底是骑兵的子类还是弓手的子类？还有那个经久不衰的笑话，连裤袜倒是改继承自裤子还是袜子？虽然最高法告诉我们连裤袜就是连裤袜，但是对于一种编程范式来说，模糊和冗余是致命的。</p><p>这就是这节课我为什么要和大家谈面向组件开发。</p><h2 id="什么是面向组件编程-Component-Oriented-Programming"><a href="#什么是面向组件编程-Component-Oriented-Programming" class="headerlink" title="什么是面向组件编程 Component-Oriented Programming"></a>什么是面向组件编程 Component-Oriented Programming</h2><h3 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h3><p>组件的本质，就是把一些经常使用的功能或者行为抽离出来，封装成一个个独立的模块，在要使用的时候想乐高积木或者 Switch 的游戏卡带一样，组装起来或者插进我们想要构建功能的对象中就可以了。这种性质，我们也称为 PnP，即 Plug and Play, 即插即用。大家以后要熟悉这个词，在很多领域都会大量出现。</p><h2 id="另一种解决方案——面向数据编程-Data-Oriented-Programming"><a href="#另一种解决方案——面向数据编程-Data-Oriented-Programming" class="headerlink" title="另一种解决方案——面向数据编程 Data-Oriented Programming"></a>另一种解决方案——面向数据编程 Data-Oriented Programming</h2><h2 id="没有银弹"><a href="#没有银弹" class="headerlink" title="没有银弹"></a>没有银弹</h2><p>“A”:”a”<br>“B”:”b”<br>“Sprite”:4</p>]]></content:encoded>
      
      
      
      
      <comments>https://rdququ.top/posts/c63a25c3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GAMES101Notes</title>
      <link>https://rdququ.top/posts/6206937d/</link>
      <guid>https://rdququ.top/posts/6206937d/</guid>
      <pubDate>Mon, 06 Nov 2023 13:51:16 GMT</pubDate>
      
      <description>&lt;p&gt;GAMES101Notes&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>GAMES101Notes</p><span id="more"></span><h2 id="Leture-3-Transform"><a href="#Leture-3-Transform" class="headerlink" title="Leture 3 Transform"></a>Leture 3 Transform</h2><ul><li>Modeling<br>-&gt;transformation, rotation, scaling<br>eg. Camera &amp; IK</li><li>Viewing<br>-&gt; (3D to 2D)projection</li></ul><h3 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h3><script type="math/tex; mode=display">x' = sx \\ y' = sy</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}s & 0 \\0 & s \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}s_x & 0 \\0 & s_y \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><h3 id="Reflection-Matrix"><a href="#Reflection-Matrix" class="headerlink" title="Reflection Matrix"></a>Reflection Matrix</h3><script type="math/tex; mode=display">x' = -x \\y' = -y</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}-1 & 0 \\0 & -1 \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><h3 id="Shear-Matrix"><a href="#Shear-Matrix" class="headerlink" title="Shear Matrix"></a>Shear Matrix</h3><script type="math/tex; mode=display">x' = x + ay \\y' = y + bx</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}1 & a \\b & 1 \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><h3 id="Rotate-abount-origin-0-0-CCW-by-default-『绕原点，逆时针』"><a href="#Rotate-abount-origin-0-0-CCW-by-default-『绕原点，逆时针』" class="headerlink" title="Rotate(abount origin$(0,0)$,CCW by default)『绕原点，逆时针』"></a>Rotate(abount origin$(0,0)$,CCW by default)『绕原点，逆时针』</h3><script type="math/tex; mode=display">x' = xcos\theta - ysin\theta \\y' = xsin\theta + ycos\theta</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}cos\theta & -sin\theta \\sin\theta & cos\theta \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><script type="math/tex; mode=display">R = \begin{bmatrix}cos\theta & -sin\theta \\sin\theta & cos\theta \\\end{bmatrix}</script><h3 id="Linear-Transform-Matrices-of-the-same-dimension-『相同』"><a href="#Linear-Transform-Matrices-of-the-same-dimension-『相同』" class="headerlink" title="Linear Transform = Matrices(of the same dimension)『相同』"></a>Linear Transform = Matrices(of the same dimension)『相同』</h3><script type="math/tex; mode=display">x' = ax + by \\y' = cx + dy</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}a & b \\c & d \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix}</script><script type="math/tex; mode=display">x' = Mx</script><h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><script type="math/tex; mode=display">x' = x + t_x\\y' = y + t_y</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}1 & 0 \\0 & 1 \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix} +\begin{bmatrix}t_x \\t_y \\\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\\end{bmatrix} =\begin{bmatrix}a & b \\c & d \\\end{bmatrix}\begin{bmatrix}x \\y \\\end{bmatrix} +\begin{bmatrix}t_x \\t_y \\\end{bmatrix}</script><p>显然，平移不是线性变换</p><p>但是我们想要有一个大统一的概念可以描述这些变换</p><h3 id="Homogeneous-Coordinates『齐次坐标』"><a href="#Homogeneous-Coordinates『齐次坐标』" class="headerlink" title="Homogeneous Coordinates『齐次坐标』"></a>Homogeneous Coordinates『齐次坐标』</h3><p>Add a third coordinate $w$ to $(x,y)$</p><ul><li>2D point: $= (x,y,1)^T$</li><li>2D vector: $= (x,y,0)^T$</li></ul><p>Maxtrix representation of translation</p><script type="math/tex; mode=display">\begin{bmatrix}x' \\y' \\w' \\\end{bmatrix} =\begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1 \\\end{bmatrix} ·\begin{bmatrix}x \\y \\1 \\\end{bmatrix} =\begin{bmatrix}x + t_x \\y + t_y \\1 \\\end{bmatrix}</script><p>$w$ 的意义是什么呢？</p><p>In homogeneous coordinates, $\begin{bmatrix}x \y \w \\end{bmatrix}$  is the 2D point$\begin{bmatrix}\frac{x}{w} \\frac{y}{w} \1\end{bmatrix}, w \neq 0$</p><h3 id="2D-transformations"><a href="#2D-transformations" class="headerlink" title="2D transformations"></a>2D transformations</h3><h4 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h4><script type="math/tex; mode=display">S(s_x,s_y) = \begin{bmatrix}s_x & 0 & 0 \\0 & s_y & 0 \\0 & 0 & 1 \\\end{bmatrix}</script><script type="math/tex; mode=display">S(s_x,s_y) = \begin{bmatrix}s_x & 0 & 0 \\0 & s_y & 0 \\0 & 0 & 1 \\\end{bmatrix}</script><h4 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h4><script type="math/tex; mode=display">R(\theta) = \begin{bmatrix}cos\theta & -sin\theta & 0 \\sin\theta & cos\theta & 0 \\0 & 0 & 1 \\\end{bmatrix}</script><h4 id="shear"><a href="#shear" class="headerlink" title="shear"></a>shear</h4><p>$<br>H(a,b) = \begin{bmatrix}<br>1 &amp; a &amp; 0 \<br>b &amp; 1 &amp; 0 \<br>0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</p><h4 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h4><p>$<br>T(t_x,t_y) = \begin{bmatrix}<br>1 &amp; 0 &amp; t_x \<br>0 &amp; 1 &amp; t_y \<br>0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</p><h3 id="Inverse-transform"><a href="#Inverse-transform" class="headerlink" title="Inverse transform"></a>Inverse transform</h3><p>逆变换刚好对应逆矩阵</p><h2 id="Lecture-4-Transformation-Cont"><a href="#Lecture-4-Transformation-Cont" class="headerlink" title="Lecture 4 Transformation Cont"></a>Lecture 4 Transformation Cont</h2><p><a href="https://blog.csdn.net/daduzimama/article/details/120509856">逆矩阵的求法</a></p><p>当一个矩阵的逆等同于他的伴随矩阵，那么这个矩阵是正交矩阵。</p><p>旋转矩阵是正交矩阵</p><h3 id="3D-transformations"><a href="#3D-transformations" class="headerlink" title="3D transformations"></a>3D transformations</h3><ul><li>Scale<br>$<br>S(s_x,s_y,s_z) = \begin{bmatrix}<br>s_x &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; s_y &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; s_z &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</li><li>Translate<br>$<br>T(t_x,t_y,t_z) = \begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; t_x \<br>0 &amp; 1 &amp; 0 &amp; t_y \<br>0 &amp; 0 &amp; 1 &amp; t_z \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</li><li>Rotate(Around x-, y-, z-axis)<br>$<br>R_x(\theta) = \begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; cos\theta &amp; -sin\theta &amp; 0 \<br>0 &amp; sin\theta &amp; cos\theta &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}\<br>$<br>$<br>R_y(\theta) = \begin{bmatrix}<br>cos\theta &amp; 0 &amp; sin\theta &amp; 0 \<br>0 &amp; 1 &amp; 0 &amp; 0 \<br>-sin\theta &amp; 0 &amp; cos\theta &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}\<br>$<br>$<br>R_z(\theta) = \begin{bmatrix}<br>cos\theta &amp; -sin\theta &amp; 0 &amp; 0 \<br>sin\theta &amp; cos\theta &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; 1 &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</li></ul><h4 id="Rodrigues’-Rotation-Formula『罗德里格斯旋转公式』"><a href="#Rodrigues’-Rotation-Formula『罗德里格斯旋转公式』" class="headerlink" title="Rodrigues’ Rotation Formula『罗德里格斯旋转公式』"></a>Rodrigues’ Rotation Formula『罗德里格斯旋转公式』</h4><p>Rotation by angle $\alpha$ around axis $n$</p><p>$<br>\boldsymbol  {R}(\boldsymbol  {n},\alpha) = cos(\alpha)\boldsymbol  {I} + (1-cos(\alpha))\boldsymbol  {nn}^T + sin(\alpha)N\<br>N = \begin{bmatrix}<br>0 &amp; -n_z &amp; n_y \<br>n_z &amp; 0 &amp; -n_x \<br>-n_y &amp; n_x &amp; 0 \<br>\end{bmatrix}<br>$</p><h3 id="Viewing-transformation『观测变换』"><a href="#Viewing-transformation『观测变换』" class="headerlink" title="Viewing transformation『观测变换』"></a>Viewing transformation『观测变换』</h3><h3 id="View-Camera-transformation『视图变换』"><a href="#View-Camera-transformation『视图变换』" class="headerlink" title="View / Camera transformation『视图变换』"></a>View / Camera transformation『视图变换』</h3><h3 id="Projection-transformation『投影变换』"><a href="#Projection-transformation『投影变换』" class="headerlink" title="Projection transformation『投影变换』"></a>Projection transformation『投影变换』</h3><h4 id="Orthographic-projection『正交投影』"><a href="#Orthographic-projection『正交投影』" class="headerlink" title="Orthographic projection『正交投影』"></a>Orthographic projection『正交投影』</h4><ul><li>相机置于原点，面朝 -z 轴</li><li>丢掉 z 轴</li><li>Translate and scale to $[-1,1]^2$</li></ul><h5 id="In-general"><a href="#In-general" class="headerlink" title="In general"></a>In general</h5><ul><li>We want to map a cuboid $[l,r] \times [b,t] \times [\boldsymbol f,\boldsymbol n]$ to the “canonical” cube$[-1,1]^3$</li></ul><h6 id="Transformation-matrix"><a href="#Transformation-matrix" class="headerlink" title="Transformation matrix"></a>Transformation matrix</h6><p>Translate(center to origin) -&gt; Scale(length/width/height to 2)</p><p>$<br>M_{ortho} = \begin{bmatrix}<br>\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; \frac{2}{t-b} &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; \frac{2}{\boldsymbol n-\boldsymbol f} &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>·<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \<br>0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \<br>0 &amp; 0 &amp; 1 &amp; -\frac{\boldsymbol n+\boldsymbol f}{2} \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>= \begin{bmatrix}<br>\frac{2}{r-l} &amp; 0 &amp; 0 &amp; -\frac{r+l}{r-l} \<br>0 &amp; \frac{2}{t-b} &amp; 0 &amp; -\frac{t+b}{t-b} \<br>0 &amp; 0 &amp; \frac{2}{\boldsymbol n-\boldsymbol f} &amp; -\frac{\boldsymbol n+\boldsymbol f}{\boldsymbol n-\boldsymbol f} \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>$</p><h4 id="Perspective-projection『透视投影』"><a href="#Perspective-projection『透视投影』" class="headerlink" title="Perspective projection『透视投影』"></a>Perspective projection『透视投影』</h4><ul><li>First “aquish” the frustum into a cuboid $(n \rightarrow n, f \rightarrow f)(M_{persp \rightarrow ortho})$</li><li>Do orthographic projection</li></ul><ol><li><p>In order to find a transformation</p><ul><li>Find the relationship between transformed points $(x’,y’,z’)$<br>and original points $(x,y,z)$</li><li>$y’ = \frac{n}{z}y\ x’ = \frac{n}{z}x$ —&gt; similar to $y’$</li></ul></li><li>In homogeneous corrdinates</li></ol><p>$<br>\begin{bmatrix}<br>x \<br>y \<br>z \<br>1 \<br>\end{bmatrix} \xrightarrow{M_{persp \rightarrow ortho}}<br>\begin{bmatrix}<br>\frac{n}{z}x \<br>\frac{n}{z}y \<br>unknown \<br>1 \<br>\end{bmatrix} \xlongequal{mult. by z}<br>\begin{bmatrix}<br>nx \<br>ny \<br>unknown \<br>z \<br>\end{bmatrix}<br>$</p><p>显然，我们可以逆推出 $M_{persp \rightarrow ortho}$ 长这样</p><p>$<br>M_{persp \rightarrow ortho} =<br>\begin{bmatrix} n &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; n &amp; 0 &amp; 0 \<br>? &amp; ? &amp; ? &amp; ? \<br>0 &amp; 0 &amp; 1 &amp; 0 \<br>\end{bmatrix}<br>$</p><p>近和远处的 $z$ 不会发生变化</p><p>把 z 代换成 n，n 是我们取得特殊定值</p><p>$<br>\begin{bmatrix}<br>x \<br>y \<br>z \<br>1 \<br>\end{bmatrix} =<br>\begin{bmatrix}<br>nx \<br>ny \<br>unknown \<br>z \<br>\end{bmatrix} \xrightarrow{replace\space z\space with\space n}<br>\begin{bmatrix}<br>x \<br>y \<br>n \<br>1 \<br>\end{bmatrix} \rightarrow<br>\begin{bmatrix}<br>nx \<br>ny \<br>n^2 \<br>n \<br>\end{bmatrix}<br>$</p><p>我们现在要求解第三行，且我们知道 x 轴和 y 轴对 z 轴没有影响, 因为最终的结果中没有 x 和 y</p><p>$<br>\begin{bmatrix}<br>0\space 0\space A\space B<br>\end{bmatrix}<br>·<br>\begin{bmatrix}<br>x \<br>y \<br>n \<br>1 \<br>\end{bmatrix} =<br>n^2<br>$</p><p>我们可以推出</p><p>$<br>\begin{bmatrix}<br>0 &amp; 0 &amp; A &amp; B<br>\end{bmatrix}<br>·<br>\begin{bmatrix}<br>x \<br>y \<br>n \<br>1 \<br>\end{bmatrix} =<br>n^2  \Rightarrow<br>An + B = n^2<br>$</p><p>我们又知道任何点的 z 坐标在远平面上都不会变化，所以我们可以推出</p><p>$<br>\begin{bmatrix}<br>0 \<br>0 \<br>f \<br>1 \<br>\end{bmatrix} \Rightarrow<br>\begin{bmatrix}<br>0 \<br>0 \<br>f \<br>1 \<br>\end{bmatrix} ==<br>\begin{bmatrix}<br>0 \<br>0 \<br>f^2 \<br>f \<br>\end{bmatrix} \Rightarrow<br>Af + B = f^2<br>$</p><p>解得</p><p>$<br>A = n+f \<br>B = -nf<br>$</p><p>所以</p><p>$<br>M_{persp \rightarrow ortho} =<br>\begin{bmatrix} n &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; n &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; n+f &amp; -nf \<br>0 &amp; 0 &amp; 1 &amp; 0 \<br>\end{bmatrix}<br>$</p><p>$<br>M<em>{persp} = M</em>{ortho} · M_{persp \rightarrow ortho} =<br>\begin{bmatrix}<br>\frac{2}{r-l} &amp; 0 &amp; 0 &amp; -\frac{r+l}{r-l} \<br>0 &amp; \frac{2}{t-b} &amp; 0 &amp; -\frac{t+b}{t-b} \<br>0 &amp; 0 &amp; \frac{2}{\boldsymbol n-\boldsymbol f} &amp; -\frac{\boldsymbol n+\boldsymbol f}{\boldsymbol n-\boldsymbol f} \<br>0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix}<br>·<br>\begin{bmatrix} n &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; n &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; n+f &amp; -nf \<br>0 &amp; 0 &amp; 1 &amp; 0 \<br>\end{bmatrix} =<br>\begin{bmatrix}<br>\frac{2n}{r-l} &amp; 0 &amp; \frac{r+l}{r-l} &amp; 0 \<br>0 &amp; \frac{2n}{t-b} &amp; \frac{t+b}{t-b} &amp; 0 \<br>0 &amp; 0 &amp; \frac{n+f}{n-f} &amp; \frac{2nf}{n-f} \<br>0 &amp; 0 &amp; 1 &amp; 0 \<br>\end{bmatrix}<br>$</p><h2 id="Rasterization-Triangles-光栅化"><a href="#Rasterization-Triangles-光栅化" class="headerlink" title="Rasterization(Triangles)光栅化"></a>Rasterization(Triangles)光栅化</h2><p>定义 field of view(fovY)垂直的可视角度 和 aspect ratio(w/h)屏幕长宽比<br><img src="垂直可视角度和屏幕长宽比.png" alt="垂直可视角度和屏幕长宽比"><br>n:near, t:top, b:bottom, l:left, r:right</p><p>视口变换</p><script type="math/tex; mode=display">\begin{bmatrix}x \\y \\z \\1 \\\end{bmatrix} =\begin{bmatrix}\frac{w}{2} & 0 & 0 & \frac{w}{2} \\0 & \frac{h}{2} & 0 & \frac{h}{2} \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1 \\\end{bmatrix}·\begin{bmatrix}x \\y \\z \\1 \\\end{bmatrix}</script><h3 id="Sample-『采样』"><a href="#Sample-『采样』" class="headerlink" title="Sample 『采样』"></a>Sample 『采样』</h3><ul><li>Sample if center of pixel is inside triangle</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Inside</span>(<span class="params">tri,x,y</span>)</span> =&gt; Point(x,y) <span class="keyword">in</span> tri ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; h; y++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; w; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        image[x][y] = Inside(tri,x + <span class="number">0.5f</span>,y + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">做叉积判断点 Q 是否在 tri 内</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">P0</span></span><br><span class="line"><span class="comment">|\</span></span><br><span class="line"><span class="comment">| \    *Q</span></span><br><span class="line"><span class="comment">|  \</span></span><br><span class="line"><span class="comment">|___\P2</span></span><br><span class="line"><span class="comment">P1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>采样率低 =&gt; 走样 =&gt; 锯齿…</p><h3 id="Anti-aliasing『反走样-抗锯齿』"><a href="#Anti-aliasing『反走样-抗锯齿』" class="headerlink" title="Anti-aliasing『反走样/抗锯齿』"></a>Anti-aliasing『反走样/抗锯齿』</h3><p>采样之前做一个滤波(filtering)</p><ul><li>Frequency『频率』</li><li>Frequency domain『频域』</li></ul><h4 id="数字信号处理相关的前置知识"><a href="#数字信号处理相关的前置知识" class="headerlink" title="数字信号处理相关的前置知识"></a>数字信号处理相关的前置知识</h4><p>傅里叶变换 =&gt; 把函数从时域转换到频域<br><img src="时域到频域.png" alt="时域到频域"></p><ul><li>Low-pass filter『低通滤波器』</li><li>High-pass filter『高通滤波器』</li><li>Band-pass filter『带通滤波器』</li><li>Band-stop filter『带阻滤波器』</li><li>Gaussian filter『高斯滤波器』</li><li>Box filter『盒子滤波器』<br>…</li></ul><p>Filtering = Convolution『卷积』= Average『平均』= Blurring『模糊』</p><p>时域卷积 = 频域乘积</p><p><img src="时域图到频谱图.png" alt="时域图到频谱图"></p><p>采样是重复原始信号的频谱</p><ul><li>采样定理:<br>在进行模拟/数字信号的转换过程中，当采样频率fs.max大于信号中最高频率fmax的2倍时(fs.max&gt;2fmax)，采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/74736706">采样定理，频谱混叠和傅里叶变换 深入理解</a></p><p>这篇文章很好地解释了为什么”对于一个连续的信号采样，采样后的频谱相当于将采样前的频谱进行延拓”<br><a href="https://www.projectrhea.org/rhea/index.php/2015_Fall_ECE_438_Boutin_A_visual_explanation_of_aliasing_and_repetition_with_the_DTFT_Erik_Swan">A visual explanation of aliasing and repetition with the DTFT</a></p><blockquote><p>时域采样得到的离散信号并不只代表这个时域信号，有无数多个频率不同的信号的采样结果是一样的，也就导致了频域上的周期延拓</p></blockquote><p>有无数个高频分量可以匹配相同的离散数据，因此离散信号的频域包含所有这些频率。<br><img src="连续信号采样频谱拓展的解释.gif" alt="连续信号采样频谱拓展的解释"></p><p>当延拓的图形重合的时候，我们就认定这时候发生了走样。</p><p>要反走样，最直接的办法就是增加采样率，在现实中的意义就是“换一个更好的分辨率更好的显示器”（让图形之间离得更远）<br>从算法/软件角度来说，我们也可以采用之前的在采样前添加滤波的方法。我们可以给图像添加一个低通滤波，把高频的信息去掉。（让图形更瘦）</p><h4 id="Antialiasing-By-Supersampling『超采样』-MSAA"><a href="#Antialiasing-By-Supersampling『超采样』-MSAA" class="headerlink" title="Antialiasing By Supersampling『超采样』(MSAA)"></a>Antialiasing By Supersampling『超采样』(MSAA)</h4><p>将一个像素近似认为更多的像素 =&gt; 给一个像素内部增加更多的采样点<br>=&gt; 工业界的做法</p><h4 id="Fast-Approximate-Antialiasing『快速近似反走样-抗锯齿』-FXAA"><a href="#Fast-Approximate-Antialiasing『快速近似反走样-抗锯齿』-FXAA" class="headerlink" title="Fast Approximate Antialiasing『快速近似反走样/抗锯齿』(FXAA)"></a>Fast Approximate Antialiasing『快速近似反走样/抗锯齿』(FXAA)</h4><p>图像的后期处理 =&gt; 通过图像匹配的办法把存在锯齿的边界找到，并且更换成没有锯齿的边界 =&gt; 效率高</p><h4 id="Temporal-Antialiasing『时域反走样-抗锯齿』-TAA"><a href="#Temporal-Antialiasing『时域反走样-抗锯齿』-TAA" class="headerlink" title="Temporal Antialiasing『时域反走样/抗锯齿』(TAA)"></a>Temporal Antialiasing『时域反走样/抗锯齿』(TAA)</h4><p>静态场景中 =&gt; 复用上一帧感知的结果 =&gt; 相当于把 MSAA 对应的样本分布在了时间上，并且在当前帧没有引入任何额外操作</p><h3 id="Z-buffering『深度缓冲』"><a href="#Z-buffering『深度缓冲』" class="headerlink" title="Z-buffering『深度缓冲』"></a>Z-buffering『深度缓冲』</h3><h4 id="Painter’s-Algorithm『画家算法』"><a href="#Painter’s-Algorithm『画家算法』" class="headerlink" title="Painter’s Algorithm『画家算法』"></a>Painter’s Algorithm『画家算法』</h4><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><p>先将画面中的物体按其距离观察点的远近进行排序，结果存放在一张线形表中。距观察点远者称其优先级高，放在表头,距观察点近者称其优先级低，放在表尾，这张表称为深度优先级表。</p><p>然后按照从表头到表尾的顺序逐个绘制物体。由于距观察者近的物体在表尾最后画出，它覆盖了远处的物体，最终在屏幕上产生了正确的遮挡关系。</p><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><p><img src="画家算法的缺陷.png" alt="画家算法的缺陷"></p><h4 id="Z-Buffer"><a href="#Z-Buffer" class="headerlink" title="Z-Buffer"></a>Z-Buffer</h4><ul><li>frame buffer 存贮当前看到的场景</li><li>depth buffer 存储每个像素所看到的几何物体最浅的深度的信息</li></ul><p><img src="深度缓存.png" alt="深度缓存"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Initialize depth buffer to +∞</span><br><span class="line"></span><br><span class="line">During rasterization:</span><br><span class="line">  <span class="keyword">for</span>(each triangle T)</span><br><span class="line">    <span class="keyword">for</span>(each sample (x,y,z) in T)</span><br><span class="line">      <span class="keyword">if</span>(z &lt; zbuffer[x,y])<span class="comment">// 如果该像素的深度小于此坐标深度缓存记录的深度</span></span><br><span class="line">        zbuffer[x,y] = z;<span class="comment">//更新深度</span></span><br><span class="line">        framebuffer[x,y] = color;<span class="comment">//更新 rgb</span></span><br></pre></td></tr></table></figure><p>处理不了透明物体</p><h3 id="Shading『着色』"><a href="#Shading『着色』" class="headerlink" title="Shading『着色』"></a>Shading『着色』</h3><p>The process of applying a material to an object.</p><h4 id="Blinn–Phong-reflection-model『布林-冯反射模型』"><a href="#Blinn–Phong-reflection-model『布林-冯反射模型』" class="headerlink" title="Blinn–Phong reflection model『布林-冯反射模型』"></a>Blinn–Phong reflection model『布林-冯反射模型』</h4><p>经验模型</p><ul><li>Ambient『环境光』</li><li>Diffuse『漫反射』</li><li>Specular『镜面反射/高光』</li></ul><p>Compute light reflected toward camera at a specific <strong>shading point</strong><br>Inputs:</p><ul><li>Viewer direction，观察方向，使用v表示</li><li>Surface normal，法线方向，使用n表示</li><li>Light direction，光线方向，使用l(小写的L)表示</li></ul><p><img src="shading_point.png" alt="shading_point"></p><p>Shading is Local =&gt; 着色不考虑其他物体的影响，只考虑着色点自身，故而只有明暗，没有阴影</p><h5 id="Diffuse-Reflection"><a href="#Diffuse-Reflection" class="headerlink" title="Diffuse Reflection"></a>Diffuse Reflection</h5><p>从接收角度看：<br>In general, light per unit area is proportional to the cosine of the angle between the light direction and the surface normal =&gt; $\cos\theta=l\cdot n$</p><p>从输出角度看<br><img src="LightFalloff.png" alt="LightFalloff"><br>光的能量会在传播中被“稀释”，一个单位面积上接收到的光的能量和光线传播的距离的平方成反比 =&gt; $I/r^2$ =&gt; 球！</p><p>综合来看</p><script type="math/tex; mode=display">L_d = k_d(I/r^2)max(0,\vec{n}\cdot\vec{l})</script><p>$L_d$ is diffusely<br>$k_d$ is diffuse coefficient(color)<br>$I/r^2$ is energy arrived at the shading point<br>$max(0,\vec{n}\cdot\vec{l})$ is energy recevied by the shading point</p><p>观察方向对漫反射像完全没有影响 =&gt; 因为反射是完全随机的，因此可以认为漫反射光在任何反射方向上的分布都是一样的</p><h5 id="Specular-highlights"><a href="#Specular-highlights" class="headerlink" title="Specular highlights"></a>Specular highlights</h5><p><img src="Specular_Term0.png" alt="Specular_Term0"><br>观察方向接近反射方向的时候才能观察到高光像<br><img src="Specular_Term.png" alt="Specular_Term"></p><p>v close to mirror direction(观察方向接近反射方向) &lt;=&gt; half vector near normal(半程向量接近法线向量)</p><script type="math/tex; mode=display">\vec{h} = bisector(\vec{v},\vec{l}) = \frac{\vec{l}+\vec{v}}{||\vec{l}+\vec{v}||}</script><script type="math/tex; mode=display">\begin{alignat}{2}L_s = k_s(I/r^2)max(0, \cos\alpha)^p\\ = k_s(I/r^2)max(0,\vec{n}\cdot\vec{h})^p\end{alignat}</script><p>$\alpha$ is the angle between $\vec{h}$ and $\vec{n}$<br>$p$ is the shininess coefficient =&gt; Increasing p narrows the reflection lobe 『增大 p 可以缩小反射波瓣』 =&gt; 取值范围(100,200)</p><h5 id="Ambient-lighting"><a href="#Ambient-lighting" class="headerlink" title="Ambient lighting"></a>Ambient lighting</h5><script type="math/tex; mode=display">L_a = k_a I_a</script><p>环境光可以被简单的视为一个常数，尤其是在 Blinn–Phong model 中，但实际上他比这复杂得多<br>$L_a$ is reflected ambient light<br>$k_a$ is ambient coefficient</p><p><img src="Ambient.png" alt="Ambient"></p><h5 id="将所有的项都加起来"><a href="#将所有的项都加起来" class="headerlink" title="将所有的项都加起来"></a>将所有的项都加起来</h5><script type="math/tex; mode=display">\begin{alignat}{2}L & = L_a + L_d + L_s \\& = k_a I_a + k_d(I/r^2)max(0,\vec{n}\cdot\vec{l}) + k_s(I/r^2)max(0,\vec{n}\cdot\vec{h})^p\end{alignat}</script><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/442023993">Blinn-Phong光照模型从定义到实现</a></p><h4 id="Shading-Frequency『着色频率』"><a href="#Shading-Frequency『着色频率』" class="headerlink" title="Shading Frequency『着色频率』"></a>Shading Frequency『着色频率』</h4><ul><li>每个平面做一次shading =&gt; Flat shading</li><li>每个顶点做一次shading =&gt; Gouraud shading</li><li>每个像素做一次shading =&gt; Phong shading</li></ul><h5 id="顶点法线"><a href="#顶点法线" class="headerlink" title="顶点法线"></a>顶点法线</h5><p>下图展示了一个简单的求法<br><img src="顶点法线.png" alt="顶点法线"><br>把目标顶点所关联的面的法线向量求和取平均，即可得到目标顶点的法线向量</p><script type="math/tex; mode=display">N_v = \frac{\sum_{i=1}^n N_i}{||\sum_{i=1}^n N_i||}</script><p>如果对三角形面进行加权，可以得到更精确的计算结果</p><h5 id="像素法线"><a href="#像素法线" class="headerlink" title="像素法线"></a>像素法线</h5><p>已经得知了顶点法线后，问题可以转化为如何得到三角形面内部的一个平滑过渡的法线(假设三角形面大于至少一个像素) =&gt; 重心坐标 + 归一化</p><h4 id="Graphics-Real-time-Rendering-Pipeline『图形管线』"><a href="#Graphics-Real-time-Rendering-Pipeline『图形管线』" class="headerlink" title="Graphics (Real-time Rendering) Pipeline『图形管线』"></a>Graphics (Real-time Rendering) Pipeline『图形管线』</h4><p><img src="GraphicsPipeline.png" alt="GraphicsPipeline"></p><p><a href="/http://shadertoy.com/view/ld3Gz2">shader toy</a><br>GPU 高度并行化处理</p><h4 id="Texture-Mapping『纹理映射』"><a href="#Texture-Mapping『纹理映射』" class="headerlink" title="Texture Mapping『纹理映射』"></a>Texture Mapping『纹理映射』</h4><p>在纹理上定义一个坐标系(u,v)(就是我们常说的 UV)，然后把纹理坐标映射到纹理上 =&gt; u 和 v 的取值范围是[0,1]</p><p>纹理要设计好在上下左右重复的时候无缝衔接 =&gt; tiled =&gt; method eg.  Wang tiling</p><h4 id="Interpolation『插值』"><a href="#Interpolation『插值』" class="headerlink" title="Interpolation『插值』"></a>Interpolation『插值』</h4><h5 id="Barycentric-Coordinates『重心坐标』"><a href="#Barycentric-Coordinates『重心坐标』" class="headerlink" title="Barycentric Coordinates『重心坐标』"></a>Barycentric Coordinates『重心坐标』</h5><p><img src="image/GAMES101Notes/三角形里的重心坐标.png" alt="三角形里的重心坐标" title="三角形里的重心坐标"></p><p>如果 $\alpha,\beta,\gamma$ 的和为1，那么点一定和三角形在同一平面，如果三者的值都大于0，那么点一定在三角形内。</p><p>原理的数学证明：</p><p>设笛卡尔坐标系下某一平面内三点$A,B,C,P$.</p><p>向量$\vec{OP}$ 可以表示为 $\vec{OC}+m\vec{CB}+n\vec{BA}=(1-m)\vec{OC}+(m-n)\vec{OB}+n\vec{OA}$</p><p>故</p><p>$\alpha=n\\beta=m-n\\gamma=1-m$</p><p>显然，$\alpha+\beta+\gamma=1$</p><p>在平面$ABCP$内，向量$\vec{OP}$ 仍然可以表示为 $\vec{OC}+m\vec{CB}+n\vec{BA}=(1-m)\vec{OC}+(m-n)\vec{OB}+n\vec{OA}$</p><p>要让 P 在 ABC 内，显然要使 m 的取值范围取 (0,1)，n 的取值范围取 (0,m)</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.bilibili.com/video/BV1X7411F744">闫令祺-GAMES101</a></li><li><a href="https://zhuanlan.zhihu.com/p/74736706">采样定理，频谱混叠和傅里叶变换 深入理解</a></li><li><a href="https://www.projectrhea.org/rhea/index.php/2015_Fall_ECE_438_Boutin_A_visual_explanation_of_aliasing_and_repetition_with_the_DTFT_Erik_Swan">A visual explanation of aliasing and repetition with the DTFT</a></li><li><a href="https://zhuanlan.zhihu.com/p/442023993">Blinn-Phong光照模型从定义到实现</a></li><li><a href="/http://shadertoy.com/view/ld3Gz2">shader toy</a></li><li><a href="https://blog.csdn.net/qq_38065509/category_9873936.html">剑 来!&#39;s 计算机图形学笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/144360079">计算机图形学补充1：重心坐标(barycentric coordinates)详解及其作用 - 知乎 (zhihu.com)</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://rdququ.top/categories/%E5%AD%A6%E4%B9%A0%E5%90%91/">学习向</category>
      
      <category domain="https://rdququ.top/categories/%E5%AD%A6%E4%B9%A0%E5%90%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/">计算机图形学</category>
      
      
      <category domain="https://rdququ.top/tags/GAMES101Notes/">GAMES101Notes</category>
      
      
      <comments>https://rdququ.top/posts/6206937d/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
